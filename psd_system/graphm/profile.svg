<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="554" onload="init(evt)" viewBox="0 0 1200 554" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="554" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o profile.svg --native -- python graphm.py --config configs/graphm_2.yaml</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="543.00"> </text><svg id="frames" x="10" width="1180" total_samples="10312"><g><title>tt_fast_matrix_vec_mul (src/tt_ops.py:258) (18 samples, 0.17%)</title><rect x="0.0485%" y="148" width="0.1746%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="18"/><text x="0.2985%" y="158.50"></text></g><g><title>swap_cores (src/tt_ops.py:235) (18 samples, 0.17%)</title><rect x="0.0485%" y="164" width="0.1746%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="18"/><text x="0.2985%" y="174.50"></text></g><g><title>svd (scipy/linalg/_decomp_svd.py:162) (17 samples, 0.16%)</title><rect x="0.0582%" y="180" width="0.1649%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="17"/><text x="0.3082%" y="190.50"></text></g><g><title>f2py_rout__flapack_dgesvd (scipy/linalg/_flapack.cpython-310-x86_64-linux-gnu.so) (17 samples, 0.16%)</title><rect x="0.0582%" y="196" width="0.1649%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="17"/><text x="0.3082%" y="206.50"></text></g><g><title>tt_infeasible_newton_system (src/tt_ipm.py:332) (19 samples, 0.18%)</title><rect x="0.0485%" y="116" width="0.1843%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="19"/><text x="0.2985%" y="126.50"></text></g><g><title>tt_compute_primal_feasibility (src/tt_ipm.py:262) (19 samples, 0.18%)</title><rect x="0.0485%" y="132" width="0.1843%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="19"/><text x="0.2985%" y="142.50"></text></g><g><title>tt_infeasible_newton_system (src/tt_ipm.py:337) (11 samples, 0.11%)</title><rect x="0.2327%" y="116" width="0.1067%" height="15" fill="rgb(207,160,47)" fg:x="24" fg:w="11"/><text x="0.4827%" y="126.50"></text></g><g><title>tt_compute_dual_feasibility (src/tt_ipm.py:268) (11 samples, 0.11%)</title><rect x="0.2327%" y="132" width="0.1067%" height="15" fill="rgb(228,23,34)" fg:x="24" fg:w="11"/><text x="0.4827%" y="142.50"></text></g><g><title>tt_fast_matrix_vec_mul (src/tt_ops.py:258) (11 samples, 0.11%)</title><rect x="0.2327%" y="148" width="0.1067%" height="15" fill="rgb(218,30,26)" fg:x="24" fg:w="11"/><text x="0.4827%" y="158.50"></text></g><g><title>swap_cores (src/tt_ops.py:235) (11 samples, 0.11%)</title><rect x="0.2327%" y="164" width="0.1067%" height="15" fill="rgb(220,122,19)" fg:x="24" fg:w="11"/><text x="0.4827%" y="174.50"></text></g><g><title>tt_compute_centrality (src/tt_ipm.py:279) (27 samples, 0.26%)</title><rect x="0.4170%" y="132" width="0.2618%" height="15" fill="rgb(250,228,42)" fg:x="43" fg:w="27"/><text x="0.6670%" y="142.50"></text></g><g><title>tt_mat_mat_mul (src/tt_eigen.py:504) (27 samples, 0.26%)</title><rect x="0.4170%" y="148" width="0.2618%" height="15" fill="rgb(240,193,28)" fg:x="43" fg:w="27"/><text x="0.6670%" y="158.50"></text></g><g><title>tt_infeasible_newton_system (src/tt_ipm.py:365) (31 samples, 0.30%)</title><rect x="0.4170%" y="116" width="0.3006%" height="15" fill="rgb(216,20,37)" fg:x="43" fg:w="31"/><text x="0.6670%" y="126.50"></text></g><g><title>tt_ipm (src/tt_ipm.py:812) (77 samples, 0.75%)</title><rect x="0.0485%" y="100" width="0.7467%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="77"/><text x="0.2985%" y="110.50"></text></g><g><title>tt_block_als (src/tt_als.py:403) (12 samples, 0.12%)</title><rect x="0.7952%" y="148" width="0.1164%" height="15" fill="rgb(217,207,13)" fg:x="82" fg:w="12"/><text x="1.0452%" y="158.50"></text></g><g><title>_fwd_sweep (src/tt_als.py:296) (12 samples, 0.12%)</title><rect x="0.9116%" y="164" width="0.1164%" height="15" fill="rgb(231,73,38)" fg:x="94" fg:w="12"/><text x="1.1616%" y="174.50"></text></g><g><title>&lt;lambda&gt; (src/tt_ipm.py:747) (28 samples, 0.27%)</title><rect x="0.7952%" y="132" width="0.2715%" height="15" fill="rgb(225,20,46)" fg:x="82" fg:w="28"/><text x="1.0452%" y="142.50"></text></g><g><title>tt_block_als (src/tt_als.py:421) (16 samples, 0.16%)</title><rect x="0.9116%" y="148" width="0.1552%" height="15" fill="rgb(210,31,41)" fg:x="94" fg:w="16"/><text x="1.1616%" y="158.50"></text></g><g><title>dspmv_L (libopenblasp-r0.3.29.so) (101 samples, 0.98%)</title><rect x="1.1928%" y="308" width="0.9794%" height="15" fill="rgb(221,200,47)" fg:x="123" fg:w="101"/><text x="1.4428%" y="318.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (101 samples, 0.98%)</title><rect x="1.1928%" y="324" width="0.9794%" height="15" fill="rgb(226,26,5)" fg:x="123" fg:w="101"/><text x="1.4428%" y="334.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (101 samples, 0.98%)</title><rect x="1.1928%" y="340" width="0.9794%" height="15" fill="rgb(249,33,26)" fg:x="123" fg:w="101"/><text x="1.4428%" y="350.50"></text></g><g><title>dgbcon_ (libopenblasp-r0.3.29.so) (105 samples, 1.02%)</title><rect x="1.1734%" y="260" width="1.0182%" height="15" fill="rgb(235,183,28)" fg:x="121" fg:w="105"/><text x="1.4234%" y="270.50"></text></g><g><title>dlaqr4_ (libopenblasp-r0.3.29.so) (104 samples, 1.01%)</title><rect x="1.1831%" y="276" width="1.0085%" height="15" fill="rgb(221,5,38)" fg:x="122" fg:w="104"/><text x="1.4331%" y="286.50"></text></g><g><title>cblas_sgemmt (libopenblasp-r0.3.29.so) (104 samples, 1.01%)</title><rect x="1.1831%" y="292" width="1.0085%" height="15" fill="rgb(247,18,42)" fg:x="122" fg:w="104"/><text x="1.4331%" y="302.50"></text></g><g><title>dgbequ_ (libopenblasp-r0.3.29.so) (114 samples, 1.11%)</title><rect x="1.1734%" y="244" width="1.1055%" height="15" fill="rgb(241,131,45)" fg:x="121" fg:w="114"/><text x="1.4234%" y="254.50"></text></g><g><title>lstsq (scipy/linalg/_basic.py:1470) (125 samples, 1.21%)</title><rect x="1.1734%" y="196" width="1.2122%" height="15" fill="rgb(249,31,29)" fg:x="121" fg:w="125"/><text x="1.4234%" y="206.50"></text></g><g><title>f2py_rout__flapack_dgelsd (scipy/linalg/_flapack.cpython-310-x86_64-linux-gnu.so) (125 samples, 1.21%)</title><rect x="1.1734%" y="212" width="1.2122%" height="15" fill="rgb(225,111,53)" fg:x="121" fg:w="125"/><text x="1.4234%" y="222.50"></text></g><g><title>dgeesx_ (libopenblasp-r0.3.29.so) (125 samples, 1.21%)</title><rect x="1.1734%" y="228" width="1.2122%" height="15" fill="rgb(238,160,17)" fg:x="121" fg:w="125"/><text x="1.4234%" y="238.50"></text></g><g><title>_ipm_local_solver (src/tt_ipm.py:103) (127 samples, 1.23%)</title><rect x="1.1637%" y="180" width="1.2316%" height="15" fill="rgb(214,148,48)" fg:x="120" fg:w="127"/><text x="1.4137%" y="190.50"></text></g><g><title>PyArray_MatrixProduct2 (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (13 samples, 0.13%)</title><rect x="2.9383%" y="388" width="0.1261%" height="15" fill="rgb(232,36,49)" fg:x="303" fg:w="13"/><text x="3.1883%" y="398.50"></text></g><g><title>cblas_matrixproduct (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (12 samples, 0.12%)</title><rect x="2.9480%" y="404" width="0.1164%" height="15" fill="rgb(209,103,24)" fg:x="304" fg:w="12"/><text x="3.1980%" y="414.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1177) (15 samples, 0.15%)</title><rect x="2.9286%" y="340" width="0.1455%" height="15" fill="rgb(229,88,8)" fg:x="302" fg:w="15"/><text x="3.1786%" y="350.50"></text></g><g><title>dispatcher_vectorcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (15 samples, 0.15%)</title><rect x="2.9286%" y="356" width="0.1455%" height="15" fill="rgb(213,181,19)" fg:x="302" fg:w="15"/><text x="3.1786%" y="366.50"></text></g><g><title>array_matrixproduct (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (14 samples, 0.14%)</title><rect x="2.9383%" y="372" width="0.1358%" height="15" fill="rgb(254,191,54)" fg:x="303" fg:w="14"/><text x="3.1883%" y="382.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:687) (45 samples, 0.44%)</title><rect x="2.6571%" y="276" width="0.4364%" height="15" fill="rgb(241,83,37)" fg:x="274" fg:w="45"/><text x="2.9071%" y="286.50"></text></g><g><title>cached_tensordot (opt_einsum/sharing.py:140) (44 samples, 0.43%)</title><rect x="2.6668%" y="292" width="0.4267%" height="15" fill="rgb(233,36,39)" fg:x="275" fg:w="44"/><text x="2.9168%" y="302.50"></text></g><g><title>_tensordot (opt_einsum/contract.py:470) (43 samples, 0.42%)</title><rect x="2.6765%" y="308" width="0.4170%" height="15" fill="rgb(226,3,54)" fg:x="276" fg:w="43"/><text x="2.9265%" y="318.50"></text></g><g><title>dispatcher_vectorcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (42 samples, 0.41%)</title><rect x="2.6862%" y="324" width="0.4073%" height="15" fill="rgb(245,192,40)" fg:x="277" fg:w="42"/><text x="2.9362%" y="334.50"></text></g><g><title>__call__ (opt_einsum/contract.py:895) (62 samples, 0.60%)</title><rect x="2.5310%" y="244" width="0.6012%" height="15" fill="rgb(238,167,29)" fg:x="261" fg:w="62"/><text x="2.7810%" y="254.50"></text></g><g><title>_contract (opt_einsum/contract.py:816) (62 samples, 0.60%)</title><rect x="2.5310%" y="260" width="0.6012%" height="15" fill="rgb(232,182,51)" fg:x="261" fg:w="62"/><text x="2.7810%" y="270.50"></text></g><g><title>MatVecWrapper_matvec (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (70 samples, 0.68%)</title><rect x="2.5019%" y="228" width="0.6788%" height="15" fill="rgb(231,60,39)" fg:x="258" fg:w="70"/><text x="2.7519%" y="238.50"></text></g><g><title>__call__ (opt_einsum/contract.py:872) (18 samples, 0.17%)</title><rect x="4.0341%" y="260" width="0.1746%" height="15" fill="rgb(208,69,12)" fg:x="416" fg:w="18"/><text x="4.2841%" y="270.50"></text></g><g><title>__call__ (opt_einsum/contract.py:892) (12 samples, 0.12%)</title><rect x="4.2475%" y="260" width="0.1164%" height="15" fill="rgb(235,93,37)" fg:x="438" fg:w="12"/><text x="4.4975%" y="270.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:660) (51 samples, 0.49%)</title><rect x="4.8972%" y="292" width="0.4946%" height="15" fill="rgb(213,116,39)" fg:x="505" fg:w="51"/><text x="5.1472%" y="302.50"></text></g><g><title>&lt;listcomp&gt; (opt_einsum/contract.py:660) (30 samples, 0.29%)</title><rect x="5.1009%" y="308" width="0.2909%" height="15" fill="rgb(222,207,29)" fg:x="526" fg:w="30"/><text x="5.3509%" y="318.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:666) (12 samples, 0.12%)</title><rect x="5.4694%" y="292" width="0.1164%" height="15" fill="rgb(206,96,30)" fg:x="564" fg:w="12"/><text x="5.7194%" y="302.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:668) (20 samples, 0.19%)</title><rect x="5.5857%" y="292" width="0.1939%" height="15" fill="rgb(218,138,4)" fg:x="576" fg:w="20"/><text x="5.8357%" y="302.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:671) (73 samples, 0.71%)</title><rect x="5.8766%" y="292" width="0.7079%" height="15" fill="rgb(250,191,14)" fg:x="606" fg:w="73"/><text x="6.1266%" y="302.50"></text></g><g><title>unicode_join (python3.10) (49 samples, 0.48%)</title><rect x="6.1094%" y="308" width="0.4752%" height="15" fill="rgb(239,60,40)" fg:x="630" fg:w="49"/><text x="6.3594%" y="318.50"></text></g><g><title>&lt;genexpr&gt; (opt_einsum/contract.py:671) (30 samples, 0.29%)</title><rect x="6.2936%" y="324" width="0.2909%" height="15" fill="rgb(206,27,48)" fg:x="649" fg:w="30"/><text x="6.5436%" y="334.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:676) (11 samples, 0.11%)</title><rect x="6.6427%" y="292" width="0.1067%" height="15" fill="rgb(225,35,8)" fg:x="685" fg:w="11"/><text x="6.8927%" y="302.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:677) (20 samples, 0.19%)</title><rect x="6.7494%" y="292" width="0.1939%" height="15" fill="rgb(250,213,24)" fg:x="696" fg:w="20"/><text x="6.9994%" y="302.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:678) (19 samples, 0.18%)</title><rect x="6.9434%" y="292" width="0.1843%" height="15" fill="rgb(247,123,22)" fg:x="716" fg:w="19"/><text x="7.1934%" y="302.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:681) (63 samples, 0.61%)</title><rect x="7.1276%" y="292" width="0.6109%" height="15" fill="rgb(231,138,38)" fg:x="735" fg:w="63"/><text x="7.3776%" y="302.50"></text></g><g><title>cached_tensordot (opt_einsum/sharing.py:139) (23 samples, 0.22%)</title><rect x="8.0780%" y="308" width="0.2230%" height="15" fill="rgb(231,145,46)" fg:x="833" fg:w="23"/><text x="8.3280%" y="318.50"></text></g><g><title>currently_sharing (opt_einsum/sharing.py:35) (19 samples, 0.18%)</title><rect x="8.1168%" y="324" width="0.1843%" height="15" fill="rgb(251,118,11)" fg:x="837" fg:w="19"/><text x="8.3668%" y="334.50"></text></g><g><title>_tensordot (opt_einsum/contract.py:469) (23 samples, 0.22%)</title><rect x="8.3883%" y="324" width="0.2230%" height="15" fill="rgb(217,147,25)" fg:x="865" fg:w="23"/><text x="8.6383%" y="334.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1141) (13 samples, 0.13%)</title><rect x="9.3968%" y="356" width="0.1261%" height="15" fill="rgb(247,81,37)" fg:x="969" fg:w="13"/><text x="9.6468%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1150) (16 samples, 0.16%)</title><rect x="9.7362%" y="356" width="0.1552%" height="15" fill="rgb(209,12,38)" fg:x="1004" fg:w="16"/><text x="9.9862%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1151) (16 samples, 0.16%)</title><rect x="9.8914%" y="356" width="0.1552%" height="15" fill="rgb(227,1,9)" fg:x="1020" fg:w="16"/><text x="10.1414%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1163) (40 samples, 0.39%)</title><rect x="10.1823%" y="356" width="0.3879%" height="15" fill="rgb(248,47,43)" fg:x="1050" fg:w="40"/><text x="10.4323%" y="366.50"></text></g><g><title>&lt;listcomp&gt; (numpy/_core/numeric.py:1163) (18 samples, 0.17%)</title><rect x="10.3957%" y="372" width="0.1746%" height="15" fill="rgb(221,10,30)" fg:x="1072" fg:w="18"/><text x="10.6457%" y="382.50"></text></g><g><title>math_prod_impl (mathmodule.c:3107) (14 samples, 0.14%)</title><rect x="10.7642%" y="388" width="0.1358%" height="15" fill="rgb(210,229,1)" fg:x="1110" fg:w="14"/><text x="11.0142%" y="398.50"></text></g><g><title>&lt;genexpr&gt; (numpy/_core/numeric.py:1165) (12 samples, 0.12%)</title><rect x="10.7836%" y="404" width="0.1164%" height="15" fill="rgb(222,148,37)" fg:x="1112" fg:w="12"/><text x="11.0336%" y="414.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1165) (36 samples, 0.35%)</title><rect x="10.5993%" y="356" width="0.3491%" height="15" fill="rgb(234,67,33)" fg:x="1093" fg:w="36"/><text x="10.8493%" y="366.50"></text></g><g><title>math_prod (mathmodule.c.h:693) (19 samples, 0.18%)</title><rect x="10.7642%" y="372" width="0.1843%" height="15" fill="rgb(247,98,35)" fg:x="1110" fg:w="19"/><text x="11.0142%" y="382.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1166) (30 samples, 0.29%)</title><rect x="10.9484%" y="356" width="0.2909%" height="15" fill="rgb(247,138,52)" fg:x="1129" fg:w="30"/><text x="11.1984%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1167) (13 samples, 0.13%)</title><rect x="11.2393%" y="356" width="0.1261%" height="15" fill="rgb(213,79,30)" fg:x="1159" fg:w="13"/><text x="11.4893%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1169) (31 samples, 0.30%)</title><rect x="11.3654%" y="356" width="0.3006%" height="15" fill="rgb(246,177,23)" fg:x="1172" fg:w="31"/><text x="11.6154%" y="366.50"></text></g><g><title>&lt;listcomp&gt; (numpy/_core/numeric.py:1169) (13 samples, 0.13%)</title><rect x="11.5400%" y="372" width="0.1261%" height="15" fill="rgb(230,62,27)" fg:x="1190" fg:w="13"/><text x="11.7900%" y="382.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1171) (33 samples, 0.32%)</title><rect x="11.7048%" y="356" width="0.3200%" height="15" fill="rgb(216,154,8)" fg:x="1207" fg:w="33"/><text x="11.9548%" y="366.50"></text></g><g><title>math_prod (mathmodule.c.h:693) (13 samples, 0.13%)</title><rect x="11.8988%" y="372" width="0.1261%" height="15" fill="rgb(244,35,45)" fg:x="1227" fg:w="13"/><text x="12.1488%" y="382.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1172) (22 samples, 0.21%)</title><rect x="12.0248%" y="356" width="0.2133%" height="15" fill="rgb(251,115,12)" fg:x="1240" fg:w="22"/><text x="12.2748%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1173) (17 samples, 0.16%)</title><rect x="12.2382%" y="356" width="0.1649%" height="15" fill="rgb(240,54,50)" fg:x="1262" fg:w="17"/><text x="12.4882%" y="366.50"></text></g><g><title>&lt;listcomp&gt; (numpy/_core/numeric.py:1173) (11 samples, 0.11%)</title><rect x="12.2964%" y="372" width="0.1067%" height="15" fill="rgb(233,84,52)" fg:x="1268" fg:w="11"/><text x="12.5464%" y="382.50"></text></g><g><title>_aligned_strided_to_contig_size8 (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (33 samples, 0.32%)</title><rect x="13.2758%" y="452" width="0.3200%" height="15" fill="rgb(207,117,47)" fg:x="1369" fg:w="33"/><text x="13.5258%" y="462.50"></text></g><g><title>_contig_to_contig (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (77 samples, 0.75%)</title><rect x="13.5958%" y="452" width="0.7467%" height="15" fill="rgb(249,43,39)" fg:x="1402" fg:w="77"/><text x="13.8458%" y="462.50"></text></g><g><title>PyArray_AssignArray (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (185 samples, 1.79%)</title><rect x="12.6358%" y="420" width="1.7940%" height="15" fill="rgb(209,38,44)" fg:x="1303" fg:w="185"/><text x="12.8858%" y="430.50">P..</text></g><g><title>raw_array_assign_array (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (181 samples, 1.76%)</title><rect x="12.6746%" y="436" width="1.7552%" height="15" fill="rgb(236,212,23)" fg:x="1307" fg:w="181"/><text x="12.9246%" y="446.50"></text></g><g><title>PyArray_NewCopy (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (198 samples, 1.92%)</title><rect x="12.6358%" y="404" width="1.9201%" height="15" fill="rgb(242,79,21)" fg:x="1303" fg:w="198"/><text x="12.8858%" y="414.50">P..</text></g><g><title>PyArray_NewLikeArray (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (13 samples, 0.13%)</title><rect x="14.4298%" y="420" width="0.1261%" height="15" fill="rgb(211,96,35)" fg:x="1488" fg:w="13"/><text x="14.6798%" y="430.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (12 samples, 0.12%)</title><rect x="14.4395%" y="436" width="0.1164%" height="15" fill="rgb(253,215,40)" fg:x="1489" fg:w="12"/><text x="14.6895%" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (12 samples, 0.12%)</title><rect x="14.4395%" y="452" width="0.1164%" height="15" fill="rgb(211,81,21)" fg:x="1489" fg:w="12"/><text x="14.6895%" y="462.50"></text></g><g><title>_reshape_with_copy_arg (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (209 samples, 2.03%)</title><rect x="12.5970%" y="388" width="2.0268%" height="15" fill="rgb(208,190,38)" fg:x="1299" fg:w="209"/><text x="12.8470%" y="398.50">_..</text></g><g><title>array_reshape (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (218 samples, 2.11%)</title><rect x="12.5291%" y="372" width="2.1140%" height="15" fill="rgb(235,213,38)" fg:x="1292" fg:w="218"/><text x="12.7791%" y="382.50">a..</text></g><g><title>PyArray_Transpose (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (11 samples, 0.11%)</title><rect x="14.7110%" y="388" width="0.1067%" height="15" fill="rgb(237,122,38)" fg:x="1517" fg:w="11"/><text x="14.9610%" y="398.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1175) (251 samples, 2.43%)</title><rect x="12.4030%" y="356" width="2.4341%" height="15" fill="rgb(244,218,35)" fg:x="1279" fg:w="251"/><text x="12.6530%" y="366.50">te..</text></g><g><title>array_transpose (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (20 samples, 0.19%)</title><rect x="14.6431%" y="372" width="0.1939%" height="15" fill="rgb(240,68,47)" fg:x="1510" fg:w="20"/><text x="14.8931%" y="382.50"></text></g><g><title>_aligned_strided_to_contig_size8 (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (58 samples, 0.56%)</title><rect x="15.1765%" y="452" width="0.5625%" height="15" fill="rgb(210,16,53)" fg:x="1565" fg:w="58"/><text x="15.4265%" y="462.50"></text></g><g><title>_contig_to_contig (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (12 samples, 0.12%)</title><rect x="15.7389%" y="452" width="0.1164%" height="15" fill="rgb(235,124,12)" fg:x="1623" fg:w="12"/><text x="15.9889%" y="462.50"></text></g><g><title>PyArray_AssignArray (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (94 samples, 0.91%)</title><rect x="14.9728%" y="420" width="0.9116%" height="15" fill="rgb(224,169,11)" fg:x="1544" fg:w="94"/><text x="15.2228%" y="430.50"></text></g><g><title>raw_array_assign_array (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (91 samples, 0.88%)</title><rect x="15.0019%" y="436" width="0.8825%" height="15" fill="rgb(250,166,2)" fg:x="1547" fg:w="91"/><text x="15.2519%" y="446.50"></text></g><g><title>PyArray_NewCopy (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (106 samples, 1.03%)</title><rect x="14.9728%" y="404" width="1.0279%" height="15" fill="rgb(242,216,29)" fg:x="1544" fg:w="106"/><text x="15.2228%" y="414.50"></text></g><g><title>PyArray_NewLikeArray (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (12 samples, 0.12%)</title><rect x="15.8844%" y="420" width="0.1164%" height="15" fill="rgb(230,116,27)" fg:x="1638" fg:w="12"/><text x="16.1344%" y="430.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (11 samples, 0.11%)</title><rect x="15.8941%" y="436" width="0.1067%" height="15" fill="rgb(228,99,48)" fg:x="1639" fg:w="11"/><text x="16.1441%" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (11 samples, 0.11%)</title><rect x="15.8941%" y="452" width="0.1067%" height="15" fill="rgb(253,11,6)" fg:x="1639" fg:w="11"/><text x="16.1441%" y="462.50"></text></g><g><title>array_reshape (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (119 samples, 1.15%)</title><rect x="14.8856%" y="372" width="1.1540%" height="15" fill="rgb(247,143,39)" fg:x="1535" fg:w="119"/><text x="15.1356%" y="382.50"></text></g><g><title>_reshape_with_copy_arg (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (111 samples, 1.08%)</title><rect x="14.9631%" y="388" width="1.0764%" height="15" fill="rgb(236,97,10)" fg:x="1543" fg:w="111"/><text x="15.2131%" y="398.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1176) (130 samples, 1.26%)</title><rect x="14.8371%" y="356" width="1.2607%" height="15" fill="rgb(233,208,19)" fg:x="1530" fg:w="130"/><text x="15.0871%" y="366.50"></text></g><g><title>PyArray_FromAny (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (12 samples, 0.12%)</title><rect x="16.2044%" y="420" width="0.1164%" height="15" fill="rgb(216,164,2)" fg:x="1671" fg:w="12"/><text x="16.4544%" y="430.50"></text></g><g><title>PyArray_FromAny_int (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (11 samples, 0.11%)</title><rect x="16.2141%" y="436" width="0.1067%" height="15" fill="rgb(220,129,5)" fg:x="1672" fg:w="11"/><text x="16.4641%" y="446.50"></text></g><g><title>0x7245ae3894ca (libc.so.6) (39 samples, 0.38%)</title><rect x="16.4275%" y="436" width="0.3782%" height="15" fill="rgb(242,17,10)" fg:x="1694" fg:w="39"/><text x="16.6775%" y="446.50"></text></g><g><title>dgemm_kernel_HASWELL (libopenblasp-r0.3.29.so) (14 samples, 0.14%)</title><rect x="17.1548%" y="516" width="0.1358%" height="15" fill="rgb(242,107,0)" fg:x="1769" fg:w="14"/><text x="17.4048%" y="526.50"></text></g><g><title>dsyrk_LN (libopenblasp-r0.3.29.so) (58 samples, 0.56%)</title><rect x="16.9123%" y="500" width="0.5625%" height="15" fill="rgb(251,28,31)" fg:x="1744" fg:w="58"/><text x="17.1623%" y="510.50"></text></g><g><title>dgemv_n_HASWELL (libopenblasp-r0.3.29.so) (19 samples, 0.18%)</title><rect x="17.2905%" y="516" width="0.1843%" height="15" fill="rgb(233,223,10)" fg:x="1783" fg:w="19"/><text x="17.5405%" y="526.50"></text></g><g><title>dsyrk_LT (libopenblasp-r0.3.29.so) (34 samples, 0.33%)</title><rect x="17.4748%" y="500" width="0.3297%" height="15" fill="rgb(215,21,27)" fg:x="1802" fg:w="34"/><text x="17.7248%" y="510.50"></text></g><g><title>dsyrk_LT (libopenblasp-r0.3.29.so) (126 samples, 1.22%)</title><rect x="16.8929%" y="452" width="1.2219%" height="15" fill="rgb(232,23,21)" fg:x="1742" fg:w="126"/><text x="17.1429%" y="462.50"></text></g><g><title>dsyrk_UT (libopenblasp-r0.3.29.so) (126 samples, 1.22%)</title><rect x="16.8929%" y="468" width="1.2219%" height="15" fill="rgb(244,5,23)" fg:x="1742" fg:w="126"/><text x="17.1429%" y="478.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (124 samples, 1.20%)</title><rect x="16.9123%" y="484" width="1.2025%" height="15" fill="rgb(226,81,46)" fg:x="1744" fg:w="124"/><text x="17.1623%" y="494.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (32 samples, 0.31%)</title><rect x="17.8045%" y="500" width="0.3103%" height="15" fill="rgb(247,70,30)" fg:x="1836" fg:w="32"/><text x="18.0545%" y="510.50"></text></g><g><title>dgemm_kernel_HASWELL (libopenblasp-r0.3.29.so) (34 samples, 0.33%)</title><rect x="18.1827%" y="468" width="0.3297%" height="15" fill="rgb(212,68,19)" fg:x="1875" fg:w="34"/><text x="18.4327%" y="478.50"></text></g><g><title>gemm_driver.isra.0 (libopenblasp-r0.3.29.so) (44 samples, 0.43%)</title><rect x="18.1730%" y="452" width="0.4267%" height="15" fill="rgb(240,187,13)" fg:x="1874" fg:w="44"/><text x="18.4230%" y="462.50"></text></g><g><title>dgemm_kernel_HASWELL (libopenblasp-r0.3.29.so) (134 samples, 1.30%)</title><rect x="18.6676%" y="468" width="1.2995%" height="15" fill="rgb(223,113,26)" fg:x="1925" fg:w="134"/><text x="18.9176%" y="478.50"></text></g><g><title>dgemv_n_HASWELL (libopenblasp-r0.3.29.so) (18 samples, 0.17%)</title><rect x="19.9670%" y="468" width="0.1746%" height="15" fill="rgb(206,192,2)" fg:x="2059" fg:w="18"/><text x="20.2170%" y="478.50"></text></g><g><title>0x7245ae3894ca (libc.so.6) (18 samples, 0.17%)</title><rect x="19.9670%" y="484" width="0.1746%" height="15" fill="rgb(241,108,4)" fg:x="2059" fg:w="18"/><text x="20.2170%" y="494.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (161 samples, 1.56%)</title><rect x="18.5997%" y="452" width="1.5613%" height="15" fill="rgb(247,173,49)" fg:x="1918" fg:w="161"/><text x="18.8497%" y="462.50"></text></g><g><title>cblas_dger (libopenblasp-r0.3.29.so) (338 samples, 3.28%)</title><rect x="16.8929%" y="436" width="3.2777%" height="15" fill="rgb(224,114,35)" fg:x="1742" fg:w="338"/><text x="17.1429%" y="446.50">cbl..</text></g><g><title>new_array_for_sum (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (20 samples, 0.19%)</title><rect x="20.1707%" y="436" width="0.1939%" height="15" fill="rgb(245,159,27)" fg:x="2080" fg:w="20"/><text x="20.4207%" y="446.50"></text></g><g><title>PyArray_New (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (20 samples, 0.19%)</title><rect x="20.1707%" y="452" width="0.1939%" height="15" fill="rgb(245,172,44)" fg:x="2080" fg:w="20"/><text x="20.4207%" y="462.50"></text></g><g><title>PyArray_NewFromDescr_int (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (18 samples, 0.17%)</title><rect x="20.1901%" y="468" width="0.1746%" height="15" fill="rgb(236,23,11)" fg:x="2082" fg:w="18"/><text x="20.4401%" y="478.50"></text></g><g><title>pthread_mutex_lock (libc.so.6) (12 samples, 0.12%)</title><rect x="20.3743%" y="436" width="0.1164%" height="15" fill="rgb(205,117,38)" fg:x="2101" fg:w="12"/><text x="20.6243%" y="446.50"></text></g><g><title>PyArray_MatrixProduct2 (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (444 samples, 4.31%)</title><rect x="16.2044%" y="404" width="4.3057%" height="15" fill="rgb(237,72,25)" fg:x="1671" fg:w="444"/><text x="16.4544%" y="414.50">PyArr..</text></g><g><title>cblas_matrixproduct (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (426 samples, 4.13%)</title><rect x="16.3790%" y="420" width="4.1311%" height="15" fill="rgb(244,70,9)" fg:x="1689" fg:w="426"/><text x="16.6290%" y="430.50">cblas..</text></g><g><title>array_matrixproduct (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (448 samples, 4.34%)</title><rect x="16.2044%" y="388" width="4.3445%" height="15" fill="rgb(217,125,39)" fg:x="1671" fg:w="448"/><text x="16.4544%" y="398.50">array..</text></g><g><title>tensordot (numpy/_core/numeric.py:1177) (464 samples, 4.50%)</title><rect x="16.0978%" y="356" width="4.4996%" height="15" fill="rgb(235,36,10)" fg:x="1660" fg:w="464"/><text x="16.3478%" y="366.50">tenso..</text></g><g><title>dispatcher_vectorcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (463 samples, 4.49%)</title><rect x="16.1074%" y="372" width="4.4899%" height="15" fill="rgb(251,123,47)" fg:x="1661" fg:w="463"/><text x="16.3574%" y="382.50">dispa..</text></g><g><title>_core_contract (opt_einsum/contract.py:687) (1,355 samples, 13.14%)</title><rect x="7.7386%" y="292" width="13.1400%" height="15" fill="rgb(221,13,13)" fg:x="798" fg:w="1355"/><text x="7.9886%" y="302.50">_core_contract (opt_..</text></g><g><title>cached_tensordot (opt_einsum/sharing.py:140) (1,297 samples, 12.58%)</title><rect x="8.3010%" y="308" width="12.5776%" height="15" fill="rgb(238,131,9)" fg:x="856" fg:w="1297"/><text x="8.5510%" y="318.50">cached_tensordot (o..</text></g><g><title>_tensordot (opt_einsum/contract.py:470) (1,265 samples, 12.27%)</title><rect x="8.6113%" y="324" width="12.2673%" height="15" fill="rgb(211,50,8)" fg:x="888" fg:w="1265"/><text x="8.8613%" y="334.50">_tensordot (opt_ei..</text></g><g><title>dispatcher_vectorcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1,264 samples, 12.26%)</title><rect x="8.6210%" y="340" width="12.2576%" height="15" fill="rgb(245,182,24)" fg:x="889" fg:w="1264"/><text x="8.8710%" y="350.50">dispatcher_vectorc..</text></g><g><title>tensordot (numpy/_core/numeric.py:1178) (29 samples, 0.28%)</title><rect x="20.5974%" y="356" width="0.2812%" height="15" fill="rgb(242,14,37)" fg:x="2124" fg:w="29"/><text x="20.8474%" y="366.50"></text></g><g><title>array_reshape (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (11 samples, 0.11%)</title><rect x="20.7719%" y="372" width="0.1067%" height="15" fill="rgb(246,228,12)" fg:x="2142" fg:w="11"/><text x="21.0219%" y="382.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:691) (22 samples, 0.21%)</title><rect x="20.9465%" y="292" width="0.2133%" height="15" fill="rgb(213,55,15)" fg:x="2160" fg:w="22"/><text x="21.1965%" y="302.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:692) (32 samples, 0.31%)</title><rect x="21.1598%" y="292" width="0.3103%" height="15" fill="rgb(209,9,3)" fg:x="2182" fg:w="32"/><text x="21.4098%" y="302.50"></text></g><g><title>cached_transpose (opt_einsum/sharing.py:121) (23 samples, 0.22%)</title><rect x="21.2471%" y="308" width="0.2230%" height="15" fill="rgb(230,59,30)" fg:x="2191" fg:w="23"/><text x="21.4971%" y="318.50"></text></g><g><title>_transpose (opt_einsum/contract.py:463) (16 samples, 0.16%)</title><rect x="21.3150%" y="324" width="0.1552%" height="15" fill="rgb(209,121,21)" fg:x="2198" fg:w="16"/><text x="21.5650%" y="334.50"></text></g><g><title>dispatcher_vectorcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (15 samples, 0.15%)</title><rect x="21.3247%" y="340" width="0.1455%" height="15" fill="rgb(220,109,13)" fg:x="2199" fg:w="15"/><text x="21.5747%" y="350.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:706) (13 samples, 0.13%)</title><rect x="21.6059%" y="292" width="0.1261%" height="15" fill="rgb(232,18,1)" fg:x="2228" fg:w="13"/><text x="21.8559%" y="302.50"></text></g><g><title>_contract (opt_einsum/contract.py:816) (1,792 samples, 17.38%)</title><rect x="4.4220%" y="276" width="17.3778%" height="15" fill="rgb(215,41,42)" fg:x="456" fg:w="1792"/><text x="4.6720%" y="286.50">_contract (opt_einsum/contr..</text></g><g><title>__call__ (opt_einsum/contract.py:895) (1,801 samples, 17.47%)</title><rect x="4.3638%" y="260" width="17.4651%" height="15" fill="rgb(224,123,36)" fg:x="450" fg:w="1801"/><text x="4.6138%" y="270.50">__call__ (opt_einsum/contra..</text></g><g><title>dispatcher_vectorcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (25 samples, 0.24%)</title><rect x="21.9065%" y="260" width="0.2424%" height="15" fill="rgb(240,125,3)" fg:x="2259" fg:w="25"/><text x="22.1565%" y="270.50"></text></g><g><title>NpyIter_AdvancedNew (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (13 samples, 0.13%)</title><rect x="22.2265%" y="292" width="0.1261%" height="15" fill="rgb(205,98,50)" fg:x="2292" fg:w="13"/><text x="22.4765%" y="302.50"></text></g><g><title>execute_ufunc_loop (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (28 samples, 0.27%)</title><rect x="22.2265%" y="276" width="0.2715%" height="15" fill="rgb(205,185,37)" fg:x="2292" fg:w="28"/><text x="22.4765%" y="286.50"></text></g><g><title>ufunc_generic_fastcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (38 samples, 0.37%)</title><rect x="22.1490%" y="260" width="0.3685%" height="15" fill="rgb(238,207,15)" fg:x="2284" fg:w="38"/><text x="22.3990%" y="270.50"></text></g><g><title>MatVecWrapper_matvec (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (1,958 samples, 18.99%)</title><rect x="3.5396%" y="244" width="18.9876%" height="15" fill="rgb(213,199,42)" fg:x="365" fg:w="1958"/><text x="3.7896%" y="254.50">MatVecWrapper_matvec (cy_src/l..</text></g><g><title>__Pyx_CyFunction_CallAsMethod (_yaml.c:30402) (33 samples, 0.32%)</title><rect x="22.5272%" y="244" width="0.3200%" height="15" fill="rgb(235,201,11)" fg:x="2323" fg:w="33"/><text x="22.7772%" y="254.50"></text></g><g><title>__Pyx_PyVectorcall_FastCallDict (_yaml.c:29715) (33 samples, 0.32%)</title><rect x="22.5272%" y="260" width="0.3200%" height="15" fill="rgb(207,46,11)" fg:x="2323" fg:w="33"/><text x="22.7772%" y="270.50"></text></g><g><title>__Pyx_PyVectorcall_FastCallDict_kw (_yaml.c:29702) (30 samples, 0.29%)</title><rect x="22.5562%" y="276" width="0.2909%" height="15" fill="rgb(241,35,35)" fg:x="2326" fg:w="30"/><text x="22.8062%" y="286.50"></text></g><g><title>qr_insert (scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so) (30 samples, 0.29%)</title><rect x="22.5562%" y="292" width="0.2909%" height="15" fill="rgb(243,32,47)" fg:x="2326" fg:w="30"/><text x="22.8062%" y="302.50"></text></g><g><title>__Pyx_PyObject_to_MemoryviewSlice_ds_double.constprop.0 (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (48 samples, 0.47%)</title><rect x="22.8666%" y="244" width="0.4655%" height="15" fill="rgb(247,202,23)" fg:x="2358" fg:w="48"/><text x="23.1166%" y="254.50"></text></g><g><title>__Pyx_ValidateAndInit_memviewslice.constprop.0 (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (47 samples, 0.46%)</title><rect x="22.8763%" y="260" width="0.4558%" height="15" fill="rgb(219,102,11)" fg:x="2359" fg:w="47"/><text x="23.1263%" y="270.50"></text></g><g><title>__pyx_memoryview_new (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (34 samples, 0.33%)</title><rect x="23.0023%" y="276" width="0.3297%" height="15" fill="rgb(243,110,44)" fg:x="2372" fg:w="34"/><text x="23.2523%" y="286.50"></text></g><g><title>__pyx_tp_new_memoryview (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (24 samples, 0.23%)</title><rect x="23.0993%" y="292" width="0.2327%" height="15" fill="rgb(222,74,54)" fg:x="2382" fg:w="24"/><text x="23.3493%" y="302.50"></text></g><g><title>__pyx_memoryview___cinit__.constprop.0 (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (15 samples, 0.15%)</title><rect x="23.1866%" y="308" width="0.1455%" height="15" fill="rgb(216,99,12)" fg:x="2391" fg:w="15"/><text x="23.4366%" y="318.50"></text></g><g><title>array_getbuffer (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (12 samples, 0.12%)</title><rect x="23.2157%" y="324" width="0.1164%" height="15" fill="rgb(226,22,26)" fg:x="2394" fg:w="12"/><text x="23.4657%" y="334.50"></text></g><g><title>array_assign_subscript (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (16 samples, 0.16%)</title><rect x="23.5939%" y="244" width="0.1552%" height="15" fill="rgb(217,163,10)" fg:x="2433" fg:w="16"/><text x="23.8439%" y="254.50"></text></g><g><title>get_view_from_index (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (12 samples, 0.12%)</title><rect x="23.7684%" y="260" width="0.1164%" height="15" fill="rgb(213,25,53)" fg:x="2451" fg:w="12"/><text x="24.0184%" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (11 samples, 0.11%)</title><rect x="23.7781%" y="276" width="0.1067%" height="15" fill="rgb(252,105,26)" fg:x="2452" fg:w="11"/><text x="24.0281%" y="286.50"></text></g><g><title>array_subscript (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (20 samples, 0.19%)</title><rect x="23.7587%" y="244" width="0.1939%" height="15" fill="rgb(220,39,43)" fg:x="2450" fg:w="20"/><text x="24.0087%" y="254.50"></text></g><g><title>dlagv2_ (libopenblasp-r0.3.29.so) (18 samples, 0.17%)</title><rect x="24.1078%" y="276" width="0.1746%" height="15" fill="rgb(229,68,48)" fg:x="2486" fg:w="18"/><text x="24.3578%" y="286.50"></text></g><g><title>dlasd3_ (libopenblasp-r0.3.29.so) (11 samples, 0.11%)</title><rect x="24.1757%" y="292" width="0.1067%" height="15" fill="rgb(252,8,32)" fg:x="2493" fg:w="11"/><text x="24.4257%" y="302.50"></text></g><g><title>dlasd3_ (libopenblasp-r0.3.29.so) (11 samples, 0.11%)</title><rect x="24.1757%" y="308" width="0.1067%" height="15" fill="rgb(223,20,43)" fg:x="2493" fg:w="11"/><text x="24.4257%" y="318.50"></text></g><g><title>lgmres_cy_cy_dgelsd (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (28 samples, 0.27%)</title><rect x="24.0593%" y="244" width="0.2715%" height="15" fill="rgb(229,81,49)" fg:x="2481" fg:w="28"/><text x="24.3093%" y="254.50"></text></g><g><title>dgeesx_ (libopenblasp-r0.3.29.so) (26 samples, 0.25%)</title><rect x="24.0787%" y="260" width="0.2521%" height="15" fill="rgb(236,28,36)" fg:x="2483" fg:w="26"/><text x="24.3287%" y="270.50"></text></g><g><title>sneg_tcopy_HASWELL (libopenblasp-r0.3.29.so) (19 samples, 0.18%)</title><rect x="24.4375%" y="244" width="0.1843%" height="15" fill="rgb(249,185,26)" fg:x="2520" fg:w="19"/><text x="24.6875%" y="254.50"></text></g><g><title>sneg_tcopy_HASWELL (libopenblasp-r0.3.29.so) (18 samples, 0.17%)</title><rect x="24.4472%" y="260" width="0.1746%" height="15" fill="rgb(249,174,33)" fg:x="2521" fg:w="18"/><text x="24.6972%" y="270.50"></text></g><g><title>lgmres_cy__fgmres (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (2,216 samples, 21.49%)</title><rect x="3.2292%" y="228" width="21.4895%" height="15" fill="rgb(233,201,37)" fg:x="333" fg:w="2216"/><text x="3.4792%" y="238.50">lgmres_cy__fgmres (cy_src/lgmres_c..</text></g><g><title>lgmres_cy_lgmres.constprop.0 (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (2,300 samples, 22.30%)</title><rect x="2.5019%" y="212" width="22.3041%" height="15" fill="rgb(221,78,26)" fg:x="258" fg:w="2300"/><text x="2.7519%" y="222.50">lgmres_cy_lgmres.constprop.0 (cy_sr..</text></g><g><title>_ipm_local_solver (src/tt_ipm.py:125) (2,301 samples, 22.31%)</title><rect x="2.5019%" y="180" width="22.3138%" height="15" fill="rgb(250,127,30)" fg:x="258" fg:w="2301"/><text x="2.7519%" y="190.50">_ipm_local_solver (src/tt_ipm.py:12..</text></g><g><title>lgmres (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (2,301 samples, 22.31%)</title><rect x="2.5019%" y="196" width="22.3138%" height="15" fill="rgb(230,49,44)" fg:x="258" fg:w="2301"/><text x="2.7519%" y="206.50">lgmres (cy_src/lgmres_cy.cpython-31..</text></g><g><title>forward_backward_sub (src/tt_ipm.py:30) (15 samples, 0.15%)</title><rect x="25.1649%" y="196" width="0.1455%" height="15" fill="rgb(229,67,23)" fg:x="2595" fg:w="15"/><text x="25.4149%" y="206.50"></text></g><g><title>solve_triangular (scipy/linalg/_basic.py:498) (14 samples, 0.14%)</title><rect x="25.1746%" y="212" width="0.1358%" height="15" fill="rgb(249,83,47)" fg:x="2596" fg:w="14"/><text x="25.4246%" y="222.50"></text></g><g><title>_solve_triangular (scipy/linalg/_basic.py:513) (14 samples, 0.14%)</title><rect x="25.1746%" y="228" width="0.1358%" height="15" fill="rgb(215,43,3)" fg:x="2596" fg:w="14"/><text x="25.4246%" y="238.50"></text></g><g><title>f2py_rout__flapack_dtrtrs (scipy/linalg/_flapack.cpython-310-x86_64-linux-gnu.so) (14 samples, 0.14%)</title><rect x="25.1746%" y="244" width="0.1358%" height="15" fill="rgb(238,154,13)" fg:x="2596" fg:w="14"/><text x="25.4246%" y="254.50"></text></g><g><title>dgemmtr_ (libopenblasp-r0.3.29.so) (14 samples, 0.14%)</title><rect x="25.1746%" y="260" width="0.1358%" height="15" fill="rgb(219,56,2)" fg:x="2596" fg:w="14"/><text x="25.4246%" y="270.50"></text></g><g><title>ctrtri_UU_parallel.localalias (libopenblasp-r0.3.29.so) (14 samples, 0.14%)</title><rect x="25.1746%" y="276" width="0.1358%" height="15" fill="rgb(233,0,4)" fg:x="2596" fg:w="14"/><text x="25.4246%" y="286.50"></text></g><g><title>gemm_driver (libopenblasp-r0.3.29.so) (14 samples, 0.14%)</title><rect x="25.1746%" y="292" width="0.1358%" height="15" fill="rgb(235,30,7)" fg:x="2596" fg:w="14"/><text x="25.4246%" y="302.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (14 samples, 0.14%)</title><rect x="25.1746%" y="308" width="0.1358%" height="15" fill="rgb(250,79,13)" fg:x="2596" fg:w="14"/><text x="25.4246%" y="318.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (14 samples, 0.14%)</title><rect x="25.1746%" y="324" width="0.1358%" height="15" fill="rgb(211,146,34)" fg:x="2596" fg:w="14"/><text x="25.4246%" y="334.50"></text></g><g><title>generic_wrapped_legacy_loop (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (18 samples, 0.17%)</title><rect x="25.3200%" y="212" width="0.1746%" height="15" fill="rgb(228,22,38)" fg:x="2611" fg:w="18"/><text x="25.5700%" y="222.50"></text></g><g><title>DOUBLE_matmul (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (18 samples, 0.17%)</title><rect x="25.3200%" y="228" width="0.1746%" height="15" fill="rgb(235,168,5)" fg:x="2611" fg:w="18"/><text x="25.5700%" y="238.50"></text></g><g><title>cblas_dger (libopenblasp-r0.3.29.so) (18 samples, 0.17%)</title><rect x="25.3200%" y="244" width="0.1746%" height="15" fill="rgb(221,155,16)" fg:x="2611" fg:w="18"/><text x="25.5700%" y="254.50"></text></g><g><title>dsyr2k_LN (libopenblasp-r0.3.29.so) (18 samples, 0.17%)</title><rect x="25.3200%" y="260" width="0.1746%" height="15" fill="rgb(215,215,53)" fg:x="2611" fg:w="18"/><text x="25.5700%" y="270.50"></text></g><g><title>dsyr2k_UT (libopenblasp-r0.3.29.so) (18 samples, 0.17%)</title><rect x="25.3200%" y="276" width="0.1746%" height="15" fill="rgb(223,4,10)" fg:x="2611" fg:w="18"/><text x="25.5700%" y="286.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (17 samples, 0.16%)</title><rect x="25.3297%" y="292" width="0.1649%" height="15" fill="rgb(234,103,6)" fg:x="2612" fg:w="17"/><text x="25.5797%" y="302.50"></text></g><g><title>_ipm_local_solver (src/tt_ipm.py:97) (49 samples, 0.48%)</title><rect x="25.0291%" y="180" width="0.4752%" height="15" fill="rgb(227,97,0)" fg:x="2581" fg:w="49"/><text x="25.2791%" y="190.50"></text></g><g><title>ufunc_generic_fastcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (20 samples, 0.19%)</title><rect x="25.3103%" y="196" width="0.1939%" height="15" fill="rgb(234,150,53)" fg:x="2610" fg:w="20"/><text x="25.5603%" y="206.50"></text></g><g><title>_bck_sweep (src/tt_als.py:217) (2,524 samples, 24.48%)</title><rect x="1.1055%" y="164" width="24.4763%" height="15" fill="rgb(228,201,54)" fg:x="114" fg:w="2524"/><text x="1.3555%" y="174.50">_bck_sweep (src/tt_als.py:217)</text></g><g><title>tt_block_als (src/tt_als.py:403) (2,557 samples, 24.80%)</title><rect x="1.1055%" y="148" width="24.7964%" height="15" fill="rgb(222,22,37)" fg:x="114" fg:w="2557"/><text x="1.3555%" y="158.50">tt_block_als (src/tt_als.py:403)</text></g><g><title>dspmv_L (libopenblasp-r0.3.29.so) (127 samples, 1.23%)</title><rect x="25.9310%" y="308" width="1.2316%" height="15" fill="rgb(237,53,32)" fg:x="2674" fg:w="127"/><text x="26.1810%" y="318.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (127 samples, 1.23%)</title><rect x="25.9310%" y="324" width="1.2316%" height="15" fill="rgb(233,25,53)" fg:x="2674" fg:w="127"/><text x="26.1810%" y="334.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (127 samples, 1.23%)</title><rect x="25.9310%" y="340" width="1.2316%" height="15" fill="rgb(210,40,34)" fg:x="2674" fg:w="127"/><text x="26.1810%" y="350.50"></text></g><g><title>dgbcon_ (libopenblasp-r0.3.29.so) (130 samples, 1.26%)</title><rect x="25.9116%" y="260" width="1.2607%" height="15" fill="rgb(241,220,44)" fg:x="2672" fg:w="130"/><text x="26.1616%" y="270.50"></text></g><g><title>dlaqr4_ (libopenblasp-r0.3.29.so) (130 samples, 1.26%)</title><rect x="25.9116%" y="276" width="1.2607%" height="15" fill="rgb(235,28,35)" fg:x="2672" fg:w="130"/><text x="26.1616%" y="286.50"></text></g><g><title>cblas_sgemmt (libopenblasp-r0.3.29.so) (130 samples, 1.26%)</title><rect x="25.9116%" y="292" width="1.2607%" height="15" fill="rgb(210,56,17)" fg:x="2672" fg:w="130"/><text x="26.1616%" y="302.50"></text></g><g><title>dgbequ_ (libopenblasp-r0.3.29.so) (137 samples, 1.33%)</title><rect x="25.9019%" y="244" width="1.3285%" height="15" fill="rgb(224,130,29)" fg:x="2671" fg:w="137"/><text x="26.1519%" y="254.50"></text></g><g><title>_ipm_local_solver (src/tt_ipm.py:103) (153 samples, 1.48%)</title><rect x="25.9019%" y="180" width="1.4837%" height="15" fill="rgb(235,212,8)" fg:x="2671" fg:w="153"/><text x="26.1519%" y="190.50"></text></g><g><title>lstsq (scipy/linalg/_basic.py:1470) (153 samples, 1.48%)</title><rect x="25.9019%" y="196" width="1.4837%" height="15" fill="rgb(223,33,50)" fg:x="2671" fg:w="153"/><text x="26.1519%" y="206.50"></text></g><g><title>f2py_rout__flapack_dgelsd (scipy/linalg/_flapack.cpython-310-x86_64-linux-gnu.so) (153 samples, 1.48%)</title><rect x="25.9019%" y="212" width="1.4837%" height="15" fill="rgb(219,149,13)" fg:x="2671" fg:w="153"/><text x="26.1519%" y="222.50"></text></g><g><title>dgeesx_ (libopenblasp-r0.3.29.so) (153 samples, 1.48%)</title><rect x="25.9019%" y="228" width="1.4837%" height="15" fill="rgb(250,156,29)" fg:x="2671" fg:w="153"/><text x="26.1519%" y="238.50"></text></g><g><title>_ipm_local_solver (src/tt_ipm.py:113) (12 samples, 0.12%)</title><rect x="27.3856%" y="180" width="0.1164%" height="15" fill="rgb(216,193,19)" fg:x="2824" fg:w="12"/><text x="27.6356%" y="190.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:687) (36 samples, 0.35%)</title><rect x="27.6571%" y="276" width="0.3491%" height="15" fill="rgb(216,135,14)" fg:x="2852" fg:w="36"/><text x="27.9071%" y="286.50"></text></g><g><title>cached_tensordot (opt_einsum/sharing.py:140) (33 samples, 0.32%)</title><rect x="27.6862%" y="292" width="0.3200%" height="15" fill="rgb(241,47,5)" fg:x="2855" fg:w="33"/><text x="27.9362%" y="302.50"></text></g><g><title>_tensordot (opt_einsum/contract.py:470) (33 samples, 0.32%)</title><rect x="27.6862%" y="308" width="0.3200%" height="15" fill="rgb(233,42,35)" fg:x="2855" fg:w="33"/><text x="27.9362%" y="318.50"></text></g><g><title>dispatcher_vectorcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (33 samples, 0.32%)</title><rect x="27.6862%" y="324" width="0.3200%" height="15" fill="rgb(231,13,6)" fg:x="2855" fg:w="33"/><text x="27.9362%" y="334.50"></text></g><g><title>__call__ (opt_einsum/contract.py:895) (52 samples, 0.50%)</title><rect x="27.5310%" y="244" width="0.5043%" height="15" fill="rgb(207,181,40)" fg:x="2839" fg:w="52"/><text x="27.7810%" y="254.50"></text></g><g><title>_contract (opt_einsum/contract.py:816) (51 samples, 0.49%)</title><rect x="27.5407%" y="260" width="0.4946%" height="15" fill="rgb(254,173,49)" fg:x="2840" fg:w="51"/><text x="27.7907%" y="270.50"></text></g><g><title>MatVecWrapper_matvec (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (58 samples, 0.56%)</title><rect x="27.5116%" y="228" width="0.5625%" height="15" fill="rgb(221,1,38)" fg:x="2837" fg:w="58"/><text x="27.7616%" y="238.50"></text></g><g><title>__call__ (opt_einsum/contract.py:872) (25 samples, 0.24%)</title><rect x="28.8014%" y="260" width="0.2424%" height="15" fill="rgb(206,124,46)" fg:x="2970" fg:w="25"/><text x="29.0514%" y="270.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:652) (11 samples, 0.11%)</title><rect x="29.5093%" y="292" width="0.1067%" height="15" fill="rgb(249,21,11)" fg:x="3043" fg:w="11"/><text x="29.7593%" y="302.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:660) (27 samples, 0.26%)</title><rect x="29.6936%" y="292" width="0.2618%" height="15" fill="rgb(222,201,40)" fg:x="3062" fg:w="27"/><text x="29.9436%" y="302.50"></text></g><g><title>&lt;listcomp&gt; (opt_einsum/contract.py:660) (15 samples, 0.15%)</title><rect x="29.8099%" y="308" width="0.1455%" height="15" fill="rgb(235,61,29)" fg:x="3074" fg:w="15"/><text x="30.0599%" y="318.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:668) (16 samples, 0.16%)</title><rect x="30.0136%" y="292" width="0.1552%" height="15" fill="rgb(219,207,3)" fg:x="3095" fg:w="16"/><text x="30.2636%" y="302.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:671) (77 samples, 0.75%)</title><rect x="30.2366%" y="292" width="0.7467%" height="15" fill="rgb(222,56,46)" fg:x="3118" fg:w="77"/><text x="30.4866%" y="302.50"></text></g><g><title>unicode_join (python3.10) (55 samples, 0.53%)</title><rect x="30.4500%" y="308" width="0.5334%" height="15" fill="rgb(239,76,54)" fg:x="3140" fg:w="55"/><text x="30.7000%" y="318.50"></text></g><g><title>&lt;genexpr&gt; (opt_einsum/contract.py:671) (38 samples, 0.37%)</title><rect x="30.6148%" y="324" width="0.3685%" height="15" fill="rgb(231,124,27)" fg:x="3157" fg:w="38"/><text x="30.8648%" y="334.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:677) (20 samples, 0.19%)</title><rect x="31.1385%" y="292" width="0.1939%" height="15" fill="rgb(249,195,6)" fg:x="3211" fg:w="20"/><text x="31.3885%" y="302.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:678) (14 samples, 0.14%)</title><rect x="31.3324%" y="292" width="0.1358%" height="15" fill="rgb(237,174,47)" fg:x="3231" fg:w="14"/><text x="31.5824%" y="302.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:681) (61 samples, 0.59%)</title><rect x="31.4682%" y="292" width="0.5915%" height="15" fill="rgb(206,201,31)" fg:x="3245" fg:w="61"/><text x="31.7182%" y="302.50"></text></g><g><title>cached_tensordot (opt_einsum/sharing.py:139) (28 samples, 0.27%)</title><rect x="32.2440%" y="308" width="0.2715%" height="15" fill="rgb(231,57,52)" fg:x="3325" fg:w="28"/><text x="32.4940%" y="318.50"></text></g><g><title>currently_sharing (opt_einsum/sharing.py:35) (18 samples, 0.17%)</title><rect x="32.3410%" y="324" width="0.1746%" height="15" fill="rgb(248,177,22)" fg:x="3335" fg:w="18"/><text x="32.5910%" y="334.50"></text></g><g><title>_tensordot (opt_einsum/contract.py:469) (17 samples, 0.16%)</title><rect x="32.5543%" y="324" width="0.1649%" height="15" fill="rgb(215,211,37)" fg:x="3357" fg:w="17"/><text x="32.8043%" y="334.50"></text></g><g><title>get_func (opt_einsum/backends/dispatch.py:79) (12 samples, 0.12%)</title><rect x="32.6028%" y="340" width="0.1164%" height="15" fill="rgb(241,128,51)" fg:x="3362" fg:w="12"/><text x="32.8528%" y="350.50"></text></g><g><title>array_dealloc (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (12 samples, 0.12%)</title><rect x="33.1168%" y="356" width="0.1164%" height="15" fill="rgb(227,165,31)" fg:x="3415" fg:w="12"/><text x="33.3668%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1141) (11 samples, 0.11%)</title><rect x="33.4368%" y="356" width="0.1067%" height="15" fill="rgb(228,167,24)" fg:x="3448" fg:w="11"/><text x="33.6868%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1150) (12 samples, 0.12%)</title><rect x="33.7083%" y="356" width="0.1164%" height="15" fill="rgb(228,143,12)" fg:x="3476" fg:w="12"/><text x="33.9583%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1163) (48 samples, 0.47%)</title><rect x="34.0477%" y="356" width="0.4655%" height="15" fill="rgb(249,149,8)" fg:x="3511" fg:w="48"/><text x="34.2977%" y="366.50"></text></g><g><title>&lt;listcomp&gt; (numpy/_core/numeric.py:1163) (27 samples, 0.26%)</title><rect x="34.2514%" y="372" width="0.2618%" height="15" fill="rgb(243,35,44)" fg:x="3532" fg:w="27"/><text x="34.5014%" y="382.50"></text></g><g><title>math_prod_impl (mathmodule.c:3107) (15 samples, 0.15%)</title><rect x="34.7459%" y="388" width="0.1455%" height="15" fill="rgb(246,89,9)" fg:x="3583" fg:w="15"/><text x="34.9959%" y="398.50"></text></g><g><title>&lt;genexpr&gt; (numpy/_core/numeric.py:1165) (14 samples, 0.14%)</title><rect x="34.7556%" y="404" width="0.1358%" height="15" fill="rgb(233,213,13)" fg:x="3584" fg:w="14"/><text x="35.0056%" y="414.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1165) (40 samples, 0.39%)</title><rect x="34.5326%" y="356" width="0.3879%" height="15" fill="rgb(233,141,41)" fg:x="3561" fg:w="40"/><text x="34.7826%" y="366.50"></text></g><g><title>math_prod (mathmodule.c.h:693) (18 samples, 0.17%)</title><rect x="34.7459%" y="372" width="0.1746%" height="15" fill="rgb(239,167,4)" fg:x="3583" fg:w="18"/><text x="34.9959%" y="382.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1166) (27 samples, 0.26%)</title><rect x="34.9205%" y="356" width="0.2618%" height="15" fill="rgb(209,217,16)" fg:x="3601" fg:w="27"/><text x="35.1705%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1167) (11 samples, 0.11%)</title><rect x="35.1823%" y="356" width="0.1067%" height="15" fill="rgb(219,88,35)" fg:x="3628" fg:w="11"/><text x="35.4323%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1169) (19 samples, 0.18%)</title><rect x="35.2890%" y="356" width="0.1843%" height="15" fill="rgb(220,193,23)" fg:x="3639" fg:w="19"/><text x="35.5390%" y="366.50"></text></g><g><title>&lt;listcomp&gt; (numpy/_core/numeric.py:1169) (15 samples, 0.15%)</title><rect x="35.3278%" y="372" width="0.1455%" height="15" fill="rgb(230,90,52)" fg:x="3643" fg:w="15"/><text x="35.5778%" y="382.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1171) (23 samples, 0.22%)</title><rect x="35.4829%" y="356" width="0.2230%" height="15" fill="rgb(252,106,19)" fg:x="3659" fg:w="23"/><text x="35.7329%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1172) (33 samples, 0.32%)</title><rect x="35.7060%" y="356" width="0.3200%" height="15" fill="rgb(206,74,20)" fg:x="3682" fg:w="33"/><text x="35.9560%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1173) (18 samples, 0.17%)</title><rect x="36.0260%" y="356" width="0.1746%" height="15" fill="rgb(230,138,44)" fg:x="3715" fg:w="18"/><text x="36.2760%" y="366.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (14 samples, 0.14%)</title><rect x="36.7630%" y="452" width="0.1358%" height="15" fill="rgb(235,182,43)" fg:x="3791" fg:w="14"/><text x="37.0130%" y="462.50"></text></g><g><title>qsort_r (libc.so.6) (11 samples, 0.11%)</title><rect x="36.7921%" y="468" width="0.1067%" height="15" fill="rgb(242,16,51)" fg:x="3794" fg:w="11"/><text x="37.0421%" y="478.50"></text></g><g><title>_aligned_strided_to_contig_size8 (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (31 samples, 0.30%)</title><rect x="36.9085%" y="452" width="0.3006%" height="15" fill="rgb(248,9,4)" fg:x="3806" fg:w="31"/><text x="37.1585%" y="462.50"></text></g><g><title>_contig_to_contig (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (89 samples, 0.86%)</title><rect x="37.2091%" y="452" width="0.8631%" height="15" fill="rgb(210,31,22)" fg:x="3837" fg:w="89"/><text x="37.4591%" y="462.50"></text></g><g><title>PyArray_AssignArray (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (171 samples, 1.66%)</title><rect x="36.4333%" y="420" width="1.6583%" height="15" fill="rgb(239,54,39)" fg:x="3757" fg:w="171"/><text x="36.6833%" y="430.50"></text></g><g><title>raw_array_assign_array (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (170 samples, 1.65%)</title><rect x="36.4430%" y="436" width="1.6486%" height="15" fill="rgb(230,99,41)" fg:x="3758" fg:w="170"/><text x="36.6930%" y="446.50"></text></g><g><title>PyArray_NewCopy (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (187 samples, 1.81%)</title><rect x="36.4333%" y="404" width="1.8134%" height="15" fill="rgb(253,106,12)" fg:x="3757" fg:w="187"/><text x="36.6833%" y="414.50">P..</text></g><g><title>PyArray_NewLikeArray (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (16 samples, 0.16%)</title><rect x="38.0915%" y="420" width="0.1552%" height="15" fill="rgb(213,46,41)" fg:x="3928" fg:w="16"/><text x="38.3415%" y="430.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (15 samples, 0.15%)</title><rect x="38.1012%" y="436" width="0.1455%" height="15" fill="rgb(215,133,35)" fg:x="3929" fg:w="15"/><text x="38.3512%" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (15 samples, 0.15%)</title><rect x="38.1012%" y="452" width="0.1455%" height="15" fill="rgb(213,28,5)" fg:x="3929" fg:w="15"/><text x="38.3512%" y="462.50"></text></g><g><title>PyDataMem_UserNEW (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (11 samples, 0.11%)</title><rect x="38.1400%" y="468" width="0.1067%" height="15" fill="rgb(215,77,49)" fg:x="3933" fg:w="11"/><text x="38.3900%" y="478.50"></text></g><g><title>array_reshape (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (203 samples, 1.97%)</title><rect x="36.3266%" y="372" width="1.9686%" height="15" fill="rgb(248,100,22)" fg:x="3746" fg:w="203"/><text x="36.5766%" y="382.50">a..</text></g><g><title>_reshape_with_copy_arg (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (195 samples, 1.89%)</title><rect x="36.4042%" y="388" width="1.8910%" height="15" fill="rgb(208,67,9)" fg:x="3754" fg:w="195"/><text x="36.6542%" y="398.50">_..</text></g><g><title>tensordot (numpy/_core/numeric.py:1175) (225 samples, 2.18%)</title><rect x="36.2005%" y="356" width="2.1819%" height="15" fill="rgb(219,133,21)" fg:x="3733" fg:w="225"/><text x="36.4505%" y="366.50">t..</text></g><g><title>_aligned_strided_to_contig_size8 (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (37 samples, 0.36%)</title><rect x="38.8092%" y="452" width="0.3588%" height="15" fill="rgb(246,46,29)" fg:x="4002" fg:w="37"/><text x="39.0592%" y="462.50"></text></g><g><title>PyArray_AssignArray (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (70 samples, 0.68%)</title><rect x="38.5861%" y="420" width="0.6788%" height="15" fill="rgb(246,185,52)" fg:x="3979" fg:w="70"/><text x="38.8361%" y="430.50"></text></g><g><title>raw_array_assign_array (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (69 samples, 0.67%)</title><rect x="38.5958%" y="436" width="0.6691%" height="15" fill="rgb(252,136,11)" fg:x="3980" fg:w="69"/><text x="38.8458%" y="446.50"></text></g><g><title>PyArray_NewCopy (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (78 samples, 0.76%)</title><rect x="38.5861%" y="404" width="0.7564%" height="15" fill="rgb(219,138,53)" fg:x="3979" fg:w="78"/><text x="38.8361%" y="414.50"></text></g><g><title>_reshape_with_copy_arg (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (88 samples, 0.85%)</title><rect x="38.5570%" y="388" width="0.8534%" height="15" fill="rgb(211,51,23)" fg:x="3976" fg:w="88"/><text x="38.8070%" y="398.50"></text></g><g><title>array_reshape (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (96 samples, 0.93%)</title><rect x="38.4891%" y="372" width="0.9310%" height="15" fill="rgb(247,221,28)" fg:x="3969" fg:w="96"/><text x="38.7391%" y="382.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1176) (124 samples, 1.20%)</title><rect x="38.3825%" y="356" width="1.2025%" height="15" fill="rgb(251,222,45)" fg:x="3958" fg:w="124"/><text x="38.6325%" y="366.50"></text></g><g><title>array_transpose (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (17 samples, 0.16%)</title><rect x="39.4201%" y="372" width="0.1649%" height="15" fill="rgb(217,162,53)" fg:x="4065" fg:w="17"/><text x="39.6701%" y="382.50"></text></g><g><title>PyArray_Transpose (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (11 samples, 0.11%)</title><rect x="39.4783%" y="388" width="0.1067%" height="15" fill="rgb(229,93,14)" fg:x="4071" fg:w="11"/><text x="39.7283%" y="398.50"></text></g><g><title>PyArray_ObjectType (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (11 samples, 0.11%)</title><rect x="39.7595%" y="420" width="0.1067%" height="15" fill="rgb(209,67,49)" fg:x="4100" fg:w="11"/><text x="40.0095%" y="430.50"></text></g><g><title>0x7245ae3894ca (libc.so.6) (33 samples, 0.32%)</title><rect x="39.9535%" y="436" width="0.3200%" height="15" fill="rgb(213,87,29)" fg:x="4120" fg:w="33"/><text x="40.2035%" y="446.50"></text></g><g><title>dsyrk_LN (libopenblasp-r0.3.29.so) (47 samples, 0.46%)</title><rect x="40.3607%" y="500" width="0.4558%" height="15" fill="rgb(205,151,52)" fg:x="4162" fg:w="47"/><text x="40.6107%" y="510.50"></text></g><g><title>dgemv_n_HASWELL (libopenblasp-r0.3.29.so) (16 samples, 0.16%)</title><rect x="40.6614%" y="516" width="0.1552%" height="15" fill="rgb(253,215,39)" fg:x="4193" fg:w="16"/><text x="40.9114%" y="526.50"></text></g><g><title>dsyrk_LT (libopenblasp-r0.3.29.so) (24 samples, 0.23%)</title><rect x="40.8165%" y="500" width="0.2327%" height="15" fill="rgb(221,220,41)" fg:x="4209" fg:w="24"/><text x="41.0665%" y="510.50"></text></g><g><title>dsyrk_LT (libopenblasp-r0.3.29.so) (103 samples, 1.00%)</title><rect x="40.3317%" y="452" width="0.9988%" height="15" fill="rgb(218,133,21)" fg:x="4159" fg:w="103"/><text x="40.5817%" y="462.50"></text></g><g><title>dsyrk_UT (libopenblasp-r0.3.29.so) (103 samples, 1.00%)</title><rect x="40.3317%" y="468" width="0.9988%" height="15" fill="rgb(221,193,43)" fg:x="4159" fg:w="103"/><text x="40.5817%" y="478.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (100 samples, 0.97%)</title><rect x="40.3607%" y="484" width="0.9697%" height="15" fill="rgb(240,128,52)" fg:x="4162" fg:w="100"/><text x="40.6107%" y="494.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (29 samples, 0.28%)</title><rect x="41.0493%" y="500" width="0.2812%" height="15" fill="rgb(253,114,12)" fg:x="4233" fg:w="29"/><text x="41.2993%" y="510.50"></text></g><g><title>dsyrk_kernel_L (libopenblasp-r0.3.29.so) (19 samples, 0.18%)</title><rect x="41.3305%" y="452" width="0.1843%" height="15" fill="rgb(215,223,47)" fg:x="4262" fg:w="19"/><text x="41.5805%" y="462.50"></text></g><g><title>dsyr2k_LT (libopenblasp-r0.3.29.so) (19 samples, 0.18%)</title><rect x="41.3305%" y="468" width="0.1843%" height="15" fill="rgb(248,225,23)" fg:x="4262" fg:w="19"/><text x="41.5805%" y="478.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (19 samples, 0.18%)</title><rect x="41.3305%" y="484" width="0.1843%" height="15" fill="rgb(250,108,0)" fg:x="4262" fg:w="19"/><text x="41.5805%" y="494.50"></text></g><g><title>dgemm_kernel_HASWELL (libopenblasp-r0.3.29.so) (26 samples, 0.25%)</title><rect x="41.5244%" y="468" width="0.2521%" height="15" fill="rgb(228,208,7)" fg:x="4282" fg:w="26"/><text x="41.7744%" y="478.50"></text></g><g><title>gemm_driver.isra.0 (libopenblasp-r0.3.29.so) (31 samples, 0.30%)</title><rect x="41.5147%" y="452" width="0.3006%" height="15" fill="rgb(244,45,10)" fg:x="4281" fg:w="31"/><text x="41.7647%" y="462.50"></text></g><g><title>dgemm_kernel_HASWELL (libopenblasp-r0.3.29.so) (107 samples, 1.04%)</title><rect x="41.8542%" y="468" width="1.0376%" height="15" fill="rgb(207,125,25)" fg:x="4316" fg:w="107"/><text x="42.1042%" y="478.50"></text></g><g><title>dgemv_n_HASWELL (libopenblasp-r0.3.29.so) (12 samples, 0.12%)</title><rect x="42.8918%" y="468" width="0.1164%" height="15" fill="rgb(210,195,18)" fg:x="4423" fg:w="12"/><text x="43.1418%" y="478.50"></text></g><g><title>0x7245ae3894ca (libc.so.6) (11 samples, 0.11%)</title><rect x="42.9015%" y="484" width="0.1067%" height="15" fill="rgb(249,80,12)" fg:x="4424" fg:w="11"/><text x="43.1515%" y="494.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (129 samples, 1.25%)</title><rect x="41.8154%" y="452" width="1.2510%" height="15" fill="rgb(221,65,9)" fg:x="4312" fg:w="129"/><text x="42.0654%" y="462.50"></text></g><g><title>cblas_dger (libopenblasp-r0.3.29.so) (283 samples, 2.74%)</title><rect x="40.3317%" y="436" width="2.7444%" height="15" fill="rgb(235,49,36)" fg:x="4159" fg:w="283"/><text x="40.5817%" y="446.50">cb..</text></g><g><title>new_array_for_sum (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (16 samples, 0.16%)</title><rect x="43.0760%" y="436" width="0.1552%" height="15" fill="rgb(225,32,20)" fg:x="4442" fg:w="16"/><text x="43.3260%" y="446.50"></text></g><g><title>PyArray_New (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (16 samples, 0.16%)</title><rect x="43.0760%" y="452" width="0.1552%" height="15" fill="rgb(215,141,46)" fg:x="4442" fg:w="16"/><text x="43.3260%" y="462.50"></text></g><g><title>PyArray_NewFromDescr_int (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (16 samples, 0.16%)</title><rect x="43.0760%" y="468" width="0.1552%" height="15" fill="rgb(250,160,47)" fg:x="4442" fg:w="16"/><text x="43.3260%" y="478.50"></text></g><g><title>array_matrixproduct (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (374 samples, 3.63%)</title><rect x="39.7013%" y="388" width="3.6268%" height="15" fill="rgb(216,222,40)" fg:x="4094" fg:w="374"/><text x="39.9513%" y="398.50">arra..</text></g><g><title>PyArray_MatrixProduct2 (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (374 samples, 3.63%)</title><rect x="39.7013%" y="404" width="3.6268%" height="15" fill="rgb(234,217,39)" fg:x="4094" fg:w="374"/><text x="39.9513%" y="414.50">PyAr..</text></g><g><title>cblas_matrixproduct (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (357 samples, 3.46%)</title><rect x="39.8662%" y="420" width="3.4620%" height="15" fill="rgb(207,178,40)" fg:x="4111" fg:w="357"/><text x="40.1162%" y="430.50">cbl..</text></g><g><title>tensordot (numpy/_core/numeric.py:1177) (390 samples, 3.78%)</title><rect x="39.5849%" y="356" width="3.7820%" height="15" fill="rgb(221,136,13)" fg:x="4082" fg:w="390"/><text x="39.8349%" y="366.50">tens..</text></g><g><title>dispatcher_vectorcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (385 samples, 3.73%)</title><rect x="39.6334%" y="372" width="3.7335%" height="15" fill="rgb(249,199,10)" fg:x="4087" fg:w="385"/><text x="39.8834%" y="382.50">disp..</text></g><g><title>_core_contract (opt_einsum/contract.py:687) (1,188 samples, 11.52%)</title><rect x="32.0597%" y="292" width="11.5206%" height="15" fill="rgb(249,222,13)" fg:x="3306" fg:w="1188"/><text x="32.3097%" y="302.50">_core_contract (o..</text></g><g><title>cached_tensordot (opt_einsum/sharing.py:140) (1,141 samples, 11.06%)</title><rect x="32.5155%" y="308" width="11.0648%" height="15" fill="rgb(244,185,38)" fg:x="3353" fg:w="1141"/><text x="32.7655%" y="318.50">cached_tensordot..</text></g><g><title>_tensordot (opt_einsum/contract.py:470) (1,120 samples, 10.86%)</title><rect x="32.7192%" y="324" width="10.8611%" height="15" fill="rgb(236,202,9)" fg:x="3374" fg:w="1120"/><text x="32.9692%" y="334.50">_tensordot (opt_..</text></g><g><title>dispatcher_vectorcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1,116 samples, 10.82%)</title><rect x="32.7580%" y="340" width="10.8223%" height="15" fill="rgb(250,229,37)" fg:x="3378" fg:w="1116"/><text x="33.0080%" y="350.50">dispatcher_vecto..</text></g><g><title>tensordot (numpy/_core/numeric.py:1178) (22 samples, 0.21%)</title><rect x="43.3670%" y="356" width="0.2133%" height="15" fill="rgb(206,174,23)" fg:x="4472" fg:w="22"/><text x="43.6170%" y="366.50"></text></g><g><title>array_reshape (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (13 samples, 0.13%)</title><rect x="43.4542%" y="372" width="0.1261%" height="15" fill="rgb(211,33,43)" fg:x="4481" fg:w="13"/><text x="43.7042%" y="382.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:691) (13 samples, 0.13%)</title><rect x="43.6191%" y="292" width="0.1261%" height="15" fill="rgb(245,58,50)" fg:x="4498" fg:w="13"/><text x="43.8691%" y="302.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:692) (26 samples, 0.25%)</title><rect x="43.7452%" y="292" width="0.2521%" height="15" fill="rgb(244,68,36)" fg:x="4511" fg:w="26"/><text x="43.9952%" y="302.50"></text></g><g><title>cached_transpose (opt_einsum/sharing.py:121) (19 samples, 0.18%)</title><rect x="43.8130%" y="308" width="0.1843%" height="15" fill="rgb(232,229,15)" fg:x="4518" fg:w="19"/><text x="44.0630%" y="318.50"></text></g><g><title>_transpose (opt_einsum/contract.py:463) (11 samples, 0.11%)</title><rect x="43.8906%" y="324" width="0.1067%" height="15" fill="rgb(254,30,23)" fg:x="4526" fg:w="11"/><text x="44.1406%" y="334.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:695) (13 samples, 0.13%)</title><rect x="43.9973%" y="292" width="0.1261%" height="15" fill="rgb(235,160,14)" fg:x="4537" fg:w="13"/><text x="44.2473%" y="302.50"></text></g><g><title>array_assign_subscript (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (13 samples, 0.13%)</title><rect x="43.9973%" y="308" width="0.1261%" height="15" fill="rgb(212,155,44)" fg:x="4537" fg:w="13"/><text x="44.2473%" y="318.50"></text></g><g><title>_contract (opt_einsum/contract.py:816) (1,559 samples, 15.12%)</title><rect x="29.2184%" y="276" width="15.1183%" height="15" fill="rgb(226,2,50)" fg:x="3013" fg:w="1559"/><text x="29.4684%" y="286.50">_contract (opt_einsum/c..</text></g><g><title>__call__ (opt_einsum/contract.py:895) (1,570 samples, 15.22%)</title><rect x="29.1408%" y="260" width="15.2250%" height="15" fill="rgb(234,177,6)" fg:x="3005" fg:w="1570"/><text x="29.3908%" y="270.50">__call__ (opt_einsum/co..</text></g><g><title>dispatcher_vectorcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (11 samples, 0.11%)</title><rect x="44.4531%" y="260" width="0.1067%" height="15" fill="rgb(217,24,9)" fg:x="4584" fg:w="11"/><text x="44.7031%" y="270.50"></text></g><g><title>NpyIter_AdvancedNew (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (15 samples, 0.15%)</title><rect x="44.6373%" y="292" width="0.1455%" height="15" fill="rgb(220,13,46)" fg:x="4603" fg:w="15"/><text x="44.8873%" y="302.50"></text></g><g><title>execute_ufunc_loop (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (30 samples, 0.29%)</title><rect x="44.6373%" y="276" width="0.2909%" height="15" fill="rgb(239,221,27)" fg:x="4603" fg:w="30"/><text x="44.8873%" y="286.50"></text></g><g><title>MatVecWrapper_matvec (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (1,702 samples, 16.51%)</title><rect x="28.4426%" y="244" width="16.5050%" height="15" fill="rgb(222,198,25)" fg:x="2933" fg:w="1702"/><text x="28.6926%" y="254.50">MatVecWrapper_matvec (cy_..</text></g><g><title>ufunc_generic_fastcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (40 samples, 0.39%)</title><rect x="44.5597%" y="260" width="0.3879%" height="15" fill="rgb(211,99,13)" fg:x="4595" fg:w="40"/><text x="44.8097%" y="270.50"></text></g><g><title>__Pyx_CyFunction_CallAsMethod (_yaml.c:30402) (26 samples, 0.25%)</title><rect x="44.9573%" y="244" width="0.2521%" height="15" fill="rgb(232,111,31)" fg:x="4636" fg:w="26"/><text x="45.2073%" y="254.50"></text></g><g><title>__Pyx_PyVectorcall_FastCallDict (_yaml.c:29715) (26 samples, 0.25%)</title><rect x="44.9573%" y="260" width="0.2521%" height="15" fill="rgb(245,82,37)" fg:x="4636" fg:w="26"/><text x="45.2073%" y="270.50"></text></g><g><title>__Pyx_PyVectorcall_FastCallDict_kw (_yaml.c:29702) (26 samples, 0.25%)</title><rect x="44.9573%" y="276" width="0.2521%" height="15" fill="rgb(227,149,46)" fg:x="4636" fg:w="26"/><text x="45.2073%" y="286.50"></text></g><g><title>qr_insert (scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so) (26 samples, 0.25%)</title><rect x="44.9573%" y="292" width="0.2521%" height="15" fill="rgb(218,36,50)" fg:x="4636" fg:w="26"/><text x="45.2073%" y="302.50"></text></g><g><title>__Pyx_PyObject_to_MemoryviewSlice_ds_double.constprop.0 (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (39 samples, 0.38%)</title><rect x="45.2289%" y="244" width="0.3782%" height="15" fill="rgb(226,80,48)" fg:x="4664" fg:w="39"/><text x="45.4789%" y="254.50"></text></g><g><title>__Pyx_ValidateAndInit_memviewslice.constprop.0 (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (39 samples, 0.38%)</title><rect x="45.2289%" y="260" width="0.3782%" height="15" fill="rgb(238,224,15)" fg:x="4664" fg:w="39"/><text x="45.4789%" y="270.50"></text></g><g><title>__pyx_memoryview_new (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (28 samples, 0.27%)</title><rect x="45.3355%" y="276" width="0.2715%" height="15" fill="rgb(241,136,10)" fg:x="4675" fg:w="28"/><text x="45.5855%" y="286.50"></text></g><g><title>__pyx_tp_new_memoryview (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (16 samples, 0.16%)</title><rect x="45.4519%" y="292" width="0.1552%" height="15" fill="rgb(208,32,45)" fg:x="4687" fg:w="16"/><text x="45.7019%" y="302.50"></text></g><g><title>__pyx_memoryview___cinit__.constprop.0 (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (12 samples, 0.12%)</title><rect x="45.4907%" y="308" width="0.1164%" height="15" fill="rgb(207,135,9)" fg:x="4691" fg:w="12"/><text x="45.7407%" y="318.50"></text></g><g><title>array_getbuffer (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (12 samples, 0.12%)</title><rect x="45.4907%" y="324" width="0.1164%" height="15" fill="rgb(206,86,44)" fg:x="4691" fg:w="12"/><text x="45.7407%" y="334.50"></text></g><g><title>_buffer_get_info (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (11 samples, 0.11%)</title><rect x="45.5004%" y="340" width="0.1067%" height="15" fill="rgb(245,177,15)" fg:x="4692" fg:w="11"/><text x="45.7504%" y="350.50"></text></g><g><title>array_assign_subscript (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (13 samples, 0.13%)</title><rect x="45.9950%" y="244" width="0.1261%" height="15" fill="rgb(206,64,50)" fg:x="4743" fg:w="13"/><text x="46.2450%" y="254.50"></text></g><g><title>array_subscript (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (11 samples, 0.11%)</title><rect x="46.1889%" y="244" width="0.1067%" height="15" fill="rgb(234,36,40)" fg:x="4763" fg:w="11"/><text x="46.4389%" y="254.50"></text></g><g><title>dlagv2_ (libopenblasp-r0.3.29.so) (13 samples, 0.13%)</title><rect x="46.4216%" y="276" width="0.1261%" height="15" fill="rgb(213,64,8)" fg:x="4787" fg:w="13"/><text x="46.6716%" y="286.50"></text></g><g><title>lgmres_cy_cy_dgelsd (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (21 samples, 0.20%)</title><rect x="46.3829%" y="244" width="0.2036%" height="15" fill="rgb(210,75,36)" fg:x="4783" fg:w="21"/><text x="46.6329%" y="254.50"></text></g><g><title>dgeesx_ (libopenblasp-r0.3.29.so) (20 samples, 0.19%)</title><rect x="46.3926%" y="260" width="0.1939%" height="15" fill="rgb(229,88,21)" fg:x="4784" fg:w="20"/><text x="46.6426%" y="270.50"></text></g><g><title>sgemmtr_ (libopenblasp-r0.3.29.so) (11 samples, 0.11%)</title><rect x="46.5865%" y="244" width="0.1067%" height="15" fill="rgb(252,204,47)" fg:x="4804" fg:w="11"/><text x="46.8365%" y="254.50"></text></g><g><title>simatcopy_k_ct_HASWELL (libopenblasp-r0.3.29.so) (11 samples, 0.11%)</title><rect x="46.5865%" y="260" width="0.1067%" height="15" fill="rgb(208,77,27)" fg:x="4804" fg:w="11"/><text x="46.8365%" y="270.50"></text></g><g><title>sneg_tcopy_HASWELL (libopenblasp-r0.3.29.so) (19 samples, 0.18%)</title><rect x="46.6932%" y="244" width="0.1843%" height="15" fill="rgb(221,76,26)" fg:x="4815" fg:w="19"/><text x="46.9432%" y="254.50"></text></g><g><title>sneg_tcopy_HASWELL (libopenblasp-r0.3.29.so) (18 samples, 0.17%)</title><rect x="46.7029%" y="260" width="0.1746%" height="15" fill="rgb(225,139,18)" fg:x="4816" fg:w="18"/><text x="46.9529%" y="270.50"></text></g><g><title>lgmres_cy__fgmres (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (1,944 samples, 18.85%)</title><rect x="28.1129%" y="228" width="18.8518%" height="15" fill="rgb(230,137,11)" fg:x="2899" fg:w="1944"/><text x="28.3629%" y="238.50">lgmres_cy__fgmres (cy_src/lgm..</text></g><g><title>_ipm_local_solver (src/tt_ipm.py:125) (2,008 samples, 19.47%)</title><rect x="27.5116%" y="180" width="19.4725%" height="15" fill="rgb(212,28,1)" fg:x="2837" fg:w="2008"/><text x="27.7616%" y="190.50">_ipm_local_solver (src/tt_ipm.p..</text></g><g><title>lgmres (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (2,008 samples, 19.47%)</title><rect x="27.5116%" y="196" width="19.4725%" height="15" fill="rgb(248,164,17)" fg:x="2837" fg:w="2008"/><text x="27.7616%" y="206.50">lgmres (cy_src/lgmres_cy.cpytho..</text></g><g><title>lgmres_cy_lgmres.constprop.0 (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (2,008 samples, 19.47%)</title><rect x="27.5116%" y="212" width="19.4725%" height="15" fill="rgb(222,171,42)" fg:x="2837" fg:w="2008"/><text x="27.7616%" y="222.50">lgmres_cy_lgmres.constprop.0 (c..</text></g><g><title>dgemmtr_ (libopenblasp-r0.3.29.so) (14 samples, 0.14%)</title><rect x="47.2265%" y="260" width="0.1358%" height="15" fill="rgb(243,84,45)" fg:x="4870" fg:w="14"/><text x="47.4765%" y="270.50"></text></g><g><title>ctrtri_UU_parallel.localalias (libopenblasp-r0.3.29.so) (14 samples, 0.14%)</title><rect x="47.2265%" y="276" width="0.1358%" height="15" fill="rgb(252,49,23)" fg:x="4870" fg:w="14"/><text x="47.4765%" y="286.50"></text></g><g><title>gemm_driver (libopenblasp-r0.3.29.so) (14 samples, 0.14%)</title><rect x="47.2265%" y="292" width="0.1358%" height="15" fill="rgb(215,19,7)" fg:x="4870" fg:w="14"/><text x="47.4765%" y="302.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (14 samples, 0.14%)</title><rect x="47.2265%" y="308" width="0.1358%" height="15" fill="rgb(238,81,41)" fg:x="4870" fg:w="14"/><text x="47.4765%" y="318.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (14 samples, 0.14%)</title><rect x="47.2265%" y="324" width="0.1358%" height="15" fill="rgb(210,199,37)" fg:x="4870" fg:w="14"/><text x="47.4765%" y="334.50"></text></g><g><title>forward_backward_sub (src/tt_ipm.py:29) (16 samples, 0.16%)</title><rect x="47.2265%" y="196" width="0.1552%" height="15" fill="rgb(244,192,49)" fg:x="4870" fg:w="16"/><text x="47.4765%" y="206.50"></text></g><g><title>solve_triangular (scipy/linalg/_basic.py:498) (16 samples, 0.16%)</title><rect x="47.2265%" y="212" width="0.1552%" height="15" fill="rgb(226,211,11)" fg:x="4870" fg:w="16"/><text x="47.4765%" y="222.50"></text></g><g><title>_solve_triangular (scipy/linalg/_basic.py:509) (16 samples, 0.16%)</title><rect x="47.2265%" y="228" width="0.1552%" height="15" fill="rgb(236,162,54)" fg:x="4870" fg:w="16"/><text x="47.4765%" y="238.50"></text></g><g><title>f2py_rout__flapack_dtrtrs (scipy/linalg/_flapack.cpython-310-x86_64-linux-gnu.so) (16 samples, 0.16%)</title><rect x="47.2265%" y="244" width="0.1552%" height="15" fill="rgb(220,229,9)" fg:x="4870" fg:w="16"/><text x="47.4765%" y="254.50"></text></g><g><title>forward_backward_sub (src/tt_ipm.py:30) (16 samples, 0.16%)</title><rect x="47.3817%" y="196" width="0.1552%" height="15" fill="rgb(250,87,22)" fg:x="4886" fg:w="16"/><text x="47.6317%" y="206.50"></text></g><g><title>solve_triangular (scipy/linalg/_basic.py:498) (16 samples, 0.16%)</title><rect x="47.3817%" y="212" width="0.1552%" height="15" fill="rgb(239,43,17)" fg:x="4886" fg:w="16"/><text x="47.6317%" y="222.50"></text></g><g><title>_solve_triangular (scipy/linalg/_basic.py:513) (15 samples, 0.15%)</title><rect x="47.3914%" y="228" width="0.1455%" height="15" fill="rgb(231,177,25)" fg:x="4887" fg:w="15"/><text x="47.6414%" y="238.50"></text></g><g><title>f2py_rout__flapack_dtrtrs (scipy/linalg/_flapack.cpython-310-x86_64-linux-gnu.so) (15 samples, 0.15%)</title><rect x="47.3914%" y="244" width="0.1455%" height="15" fill="rgb(219,179,1)" fg:x="4887" fg:w="15"/><text x="47.6414%" y="254.50"></text></g><g><title>dgemmtr_ (libopenblasp-r0.3.29.so) (15 samples, 0.15%)</title><rect x="47.3914%" y="260" width="0.1455%" height="15" fill="rgb(238,219,53)" fg:x="4887" fg:w="15"/><text x="47.6414%" y="270.50"></text></g><g><title>ctrtri_UU_parallel.localalias (libopenblasp-r0.3.29.so) (15 samples, 0.15%)</title><rect x="47.3914%" y="276" width="0.1455%" height="15" fill="rgb(232,167,36)" fg:x="4887" fg:w="15"/><text x="47.6414%" y="286.50"></text></g><g><title>gemm_driver (libopenblasp-r0.3.29.so) (15 samples, 0.15%)</title><rect x="47.3914%" y="292" width="0.1455%" height="15" fill="rgb(244,19,51)" fg:x="4887" fg:w="15"/><text x="47.6414%" y="302.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (15 samples, 0.15%)</title><rect x="47.3914%" y="308" width="0.1455%" height="15" fill="rgb(224,6,22)" fg:x="4887" fg:w="15"/><text x="47.6414%" y="318.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (13 samples, 0.13%)</title><rect x="47.4108%" y="324" width="0.1261%" height="15" fill="rgb(224,145,5)" fg:x="4889" fg:w="13"/><text x="47.6608%" y="334.50"></text></g><g><title>_ipm_local_solver (src/tt_ipm.py:97) (41 samples, 0.40%)</title><rect x="47.2265%" y="180" width="0.3976%" height="15" fill="rgb(234,130,49)" fg:x="4870" fg:w="41"/><text x="47.4765%" y="190.50"></text></g><g><title>_fwd_sweep (src/tt_als.py:296) (2,248 samples, 21.80%)</title><rect x="25.9019%" y="164" width="21.7998%" height="15" fill="rgb(254,6,2)" fg:x="2671" fg:w="2248"/><text x="26.1519%" y="174.50">_fwd_sweep (src/tt_als.py:296)</text></g><g><title>_tt_ipm_newton_step (src/tt_ipm.py:412) (4,862 samples, 47.15%)</title><rect x="0.7952%" y="116" width="47.1490%" height="15" fill="rgb(208,96,46)" fg:x="82" fg:w="4862"/><text x="1.0452%" y="126.50">_tt_ipm_newton_step (src/tt_ipm.py:412)</text></g><g><title>&lt;lambda&gt; (src/tt_ipm.py:759) (4,834 samples, 46.88%)</title><rect x="1.0667%" y="132" width="46.8774%" height="15" fill="rgb(239,3,39)" fg:x="110" fg:w="4834"/><text x="1.3167%" y="142.50">&lt;lambda&gt; (src/tt_ipm.py:759)</text></g><g><title>tt_block_als (src/tt_als.py:421) (2,273 samples, 22.04%)</title><rect x="25.9019%" y="148" width="22.0423%" height="15" fill="rgb(233,210,1)" fg:x="2671" fg:w="2273"/><text x="26.1519%" y="158.50">tt_block_als (src/tt_als.py:421)</text></g><g><title>tt_assess_solution_quality (src/tt_ipm.py:301) (13 samples, 0.13%)</title><rect x="48.0314%" y="132" width="0.1261%" height="15" fill="rgb(244,137,37)" fg:x="4953" fg:w="13"/><text x="48.2814%" y="142.50"></text></g><g><title>tt_compute_primal_feasibility (src/tt_ipm.py:262) (13 samples, 0.13%)</title><rect x="48.0314%" y="148" width="0.1261%" height="15" fill="rgb(240,136,2)" fg:x="4953" fg:w="13"/><text x="48.2814%" y="158.50"></text></g><g><title>tt_fast_matrix_vec_mul (src/tt_ops.py:258) (13 samples, 0.13%)</title><rect x="48.0314%" y="164" width="0.1261%" height="15" fill="rgb(239,18,37)" fg:x="4953" fg:w="13"/><text x="48.2814%" y="174.50"></text></g><g><title>swap_cores (src/tt_ops.py:235) (13 samples, 0.13%)</title><rect x="48.0314%" y="180" width="0.1261%" height="15" fill="rgb(218,185,22)" fg:x="4953" fg:w="13"/><text x="48.2814%" y="190.50"></text></g><g><title>svd (scipy/linalg/_decomp_svd.py:162) (13 samples, 0.13%)</title><rect x="48.0314%" y="196" width="0.1261%" height="15" fill="rgb(225,218,4)" fg:x="4953" fg:w="13"/><text x="48.2814%" y="206.50"></text></g><g><title>f2py_rout__flapack_dgesvd (scipy/linalg/_flapack.cpython-310-x86_64-linux-gnu.so) (13 samples, 0.13%)</title><rect x="48.0314%" y="212" width="0.1261%" height="15" fill="rgb(230,182,32)" fg:x="4953" fg:w="13"/><text x="48.2814%" y="222.50"></text></g><g><title>tt_compute_centrality (src/tt_ipm.py:279) (14 samples, 0.14%)</title><rect x="48.1963%" y="148" width="0.1358%" height="15" fill="rgb(242,56,43)" fg:x="4970" fg:w="14"/><text x="48.4463%" y="158.50"></text></g><g><title>tt_mat_mat_mul (src/tt_eigen.py:504) (14 samples, 0.14%)</title><rect x="48.1963%" y="164" width="0.1358%" height="15" fill="rgb(233,99,24)" fg:x="4970" fg:w="14"/><text x="48.4463%" y="174.50"></text></g><g><title>tt_assess_solution_quality (src/tt_ipm.py:309) (16 samples, 0.16%)</title><rect x="48.1963%" y="132" width="0.1552%" height="15" fill="rgb(234,209,42)" fg:x="4970" fg:w="16"/><text x="48.4463%" y="142.50"></text></g><g><title>_tt_ipm_newton_step (src/tt_ipm.py:423) (36 samples, 0.35%)</title><rect x="48.0314%" y="116" width="0.3491%" height="15" fill="rgb(227,7,12)" fg:x="4953" fg:w="36"/><text x="48.2814%" y="126.50"></text></g><g><title>tt_max_generalised_eigen (src/tt_eigen.py:168) (12 samples, 0.12%)</title><rect x="48.5260%" y="148" width="0.1164%" height="15" fill="rgb(245,203,43)" fg:x="5004" fg:w="12"/><text x="48.7760%" y="158.50"></text></g><g><title>_tt_line_search (src/tt_ipm.py:568) (31 samples, 0.30%)</title><rect x="48.3805%" y="132" width="0.3006%" height="15" fill="rgb(238,205,33)" fg:x="4989" fg:w="31"/><text x="48.6305%" y="142.50"></text></g><g><title>_tt_line_search (src/tt_ipm.py:570) (15 samples, 0.15%)</title><rect x="48.6811%" y="132" width="0.1455%" height="15" fill="rgb(231,56,7)" fg:x="5020" fg:w="15"/><text x="48.9311%" y="142.50"></text></g><g><title>_ineq_step_size (src/tt_ipm.py:586) (17 samples, 0.16%)</title><rect x="48.9042%" y="164" width="0.1649%" height="15" fill="rgb(244,186,29)" fg:x="5043" fg:w="17"/><text x="49.1542%" y="174.50"></text></g><g><title>_tt_ipm_newton_step (src/tt_ipm.py:425) (73 samples, 0.71%)</title><rect x="48.3805%" y="116" width="0.7079%" height="15" fill="rgb(234,111,31)" fg:x="4989" fg:w="73"/><text x="48.6305%" y="126.50"></text></g><g><title>_tt_line_search (src/tt_ipm.py:575) (27 samples, 0.26%)</title><rect x="48.8266%" y="132" width="0.2618%" height="15" fill="rgb(241,149,10)" fg:x="5035" fg:w="27"/><text x="49.0766%" y="142.50"></text></g><g><title>_tt_line_search_ineq (src/tt_ipm.py:602) (21 samples, 0.20%)</title><rect x="48.8848%" y="148" width="0.2036%" height="15" fill="rgb(249,206,44)" fg:x="5041" fg:w="21"/><text x="49.1348%" y="158.50"></text></g><g><title>_bck_sweep (src/tt_als.py:217) (20 samples, 0.19%)</title><rect x="49.1951%" y="164" width="0.1939%" height="15" fill="rgb(251,153,30)" fg:x="5073" fg:w="20"/><text x="49.4451%" y="174.50"></text></g><g><title>tt_block_als (src/tt_als.py:403) (21 samples, 0.20%)</title><rect x="49.1951%" y="148" width="0.2036%" height="15" fill="rgb(239,152,38)" fg:x="5073" fg:w="21"/><text x="49.4451%" y="158.50"></text></g><g><title>_fwd_sweep (src/tt_als.py:296) (29 samples, 0.28%)</title><rect x="49.3988%" y="164" width="0.2812%" height="15" fill="rgb(249,139,47)" fg:x="5094" fg:w="29"/><text x="49.6488%" y="174.50"></text></g><g><title>tt_block_als (src/tt_als.py:421) (37 samples, 0.36%)</title><rect x="49.3988%" y="148" width="0.3588%" height="15" fill="rgb(244,64,35)" fg:x="5094" fg:w="37"/><text x="49.6488%" y="158.50"></text></g><g><title>&lt;lambda&gt; (src/tt_ipm.py:747) (59 samples, 0.57%)</title><rect x="49.1951%" y="132" width="0.5721%" height="15" fill="rgb(216,46,15)" fg:x="5073" fg:w="59"/><text x="49.4451%" y="142.50"></text></g><g><title>dgbcon_ (libopenblasp-r0.3.29.so) (138 samples, 1.34%)</title><rect x="49.8157%" y="260" width="1.3382%" height="15" fill="rgb(250,74,19)" fg:x="5137" fg:w="138"/><text x="50.0657%" y="270.50"></text></g><g><title>dlaqr4_ (libopenblasp-r0.3.29.so) (138 samples, 1.34%)</title><rect x="49.8157%" y="276" width="1.3382%" height="15" fill="rgb(249,42,33)" fg:x="5137" fg:w="138"/><text x="50.0657%" y="286.50"></text></g><g><title>cblas_sgemmt (libopenblasp-r0.3.29.so) (138 samples, 1.34%)</title><rect x="49.8157%" y="292" width="1.3382%" height="15" fill="rgb(242,149,17)" fg:x="5137" fg:w="138"/><text x="50.0657%" y="302.50"></text></g><g><title>dspmv_L (libopenblasp-r0.3.29.so) (138 samples, 1.34%)</title><rect x="49.8157%" y="308" width="1.3382%" height="15" fill="rgb(244,29,21)" fg:x="5137" fg:w="138"/><text x="50.0657%" y="318.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (138 samples, 1.34%)</title><rect x="49.8157%" y="324" width="1.3382%" height="15" fill="rgb(220,130,37)" fg:x="5137" fg:w="138"/><text x="50.0657%" y="334.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (138 samples, 1.34%)</title><rect x="49.8157%" y="340" width="1.3382%" height="15" fill="rgb(211,67,2)" fg:x="5137" fg:w="138"/><text x="50.0657%" y="350.50"></text></g><g><title>dgbequ_ (libopenblasp-r0.3.29.so) (144 samples, 1.40%)</title><rect x="49.8061%" y="244" width="1.3964%" height="15" fill="rgb(235,68,52)" fg:x="5136" fg:w="144"/><text x="50.0561%" y="254.50"></text></g><g><title>_ipm_local_solver (src/tt_ipm.py:103) (169 samples, 1.64%)</title><rect x="49.7964%" y="180" width="1.6389%" height="15" fill="rgb(246,142,3)" fg:x="5135" fg:w="169"/><text x="50.0464%" y="190.50"></text></g><g><title>lstsq (scipy/linalg/_basic.py:1470) (168 samples, 1.63%)</title><rect x="49.8061%" y="196" width="1.6292%" height="15" fill="rgb(241,25,7)" fg:x="5136" fg:w="168"/><text x="50.0561%" y="206.50"></text></g><g><title>f2py_rout__flapack_dgelsd (scipy/linalg/_flapack.cpython-310-x86_64-linux-gnu.so) (168 samples, 1.63%)</title><rect x="49.8061%" y="212" width="1.6292%" height="15" fill="rgb(242,119,39)" fg:x="5136" fg:w="168"/><text x="50.0561%" y="222.50"></text></g><g><title>dgeesx_ (libopenblasp-r0.3.29.so) (168 samples, 1.63%)</title><rect x="49.8061%" y="228" width="1.6292%" height="15" fill="rgb(241,98,45)" fg:x="5136" fg:w="168"/><text x="50.0561%" y="238.50"></text></g><g><title>dorgbr_ (libopenblasp-r0.3.29.so) (12 samples, 0.12%)</title><rect x="51.3189%" y="244" width="0.1164%" height="15" fill="rgb(254,28,30)" fg:x="5292" fg:w="12"/><text x="51.5689%" y="254.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:687) (20 samples, 0.19%)</title><rect x="51.5516%" y="276" width="0.1939%" height="15" fill="rgb(241,142,54)" fg:x="5316" fg:w="20"/><text x="51.8016%" y="286.50"></text></g><g><title>cached_tensordot (opt_einsum/sharing.py:140) (20 samples, 0.19%)</title><rect x="51.5516%" y="292" width="0.1939%" height="15" fill="rgb(222,85,15)" fg:x="5316" fg:w="20"/><text x="51.8016%" y="302.50"></text></g><g><title>_tensordot (opt_einsum/contract.py:470) (19 samples, 0.18%)</title><rect x="51.5613%" y="308" width="0.1843%" height="15" fill="rgb(210,85,47)" fg:x="5317" fg:w="19"/><text x="51.8113%" y="318.50"></text></g><g><title>dispatcher_vectorcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (19 samples, 0.18%)</title><rect x="51.5613%" y="324" width="0.1843%" height="15" fill="rgb(224,206,25)" fg:x="5317" fg:w="19"/><text x="51.8113%" y="334.50"></text></g><g><title>__call__ (opt_einsum/contract.py:895) (28 samples, 0.27%)</title><rect x="51.4837%" y="244" width="0.2715%" height="15" fill="rgb(243,201,19)" fg:x="5309" fg:w="28"/><text x="51.7337%" y="254.50"></text></g><g><title>_contract (opt_einsum/contract.py:816) (28 samples, 0.27%)</title><rect x="51.4837%" y="260" width="0.2715%" height="15" fill="rgb(236,59,4)" fg:x="5309" fg:w="28"/><text x="51.7337%" y="270.50"></text></g><g><title>MatVecWrapper_matvec (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (30 samples, 0.29%)</title><rect x="51.4740%" y="228" width="0.2909%" height="15" fill="rgb(254,179,45)" fg:x="5308" fg:w="30"/><text x="51.7240%" y="238.50"></text></g><g><title>__call__ (opt_einsum/contract.py:872) (15 samples, 0.15%)</title><rect x="52.2789%" y="260" width="0.1455%" height="15" fill="rgb(226,14,10)" fg:x="5391" fg:w="15"/><text x="52.5289%" y="270.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:660) (16 samples, 0.16%)</title><rect x="52.7541%" y="292" width="0.1552%" height="15" fill="rgb(244,27,41)" fg:x="5440" fg:w="16"/><text x="53.0041%" y="302.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:668) (12 samples, 0.12%)</title><rect x="53.0062%" y="292" width="0.1164%" height="15" fill="rgb(235,35,32)" fg:x="5466" fg:w="12"/><text x="53.2562%" y="302.50"></text></g><g><title>&lt;genexpr&gt; (opt_einsum/contract.py:671) (11 samples, 0.11%)</title><rect x="53.3456%" y="324" width="0.1067%" height="15" fill="rgb(218,68,31)" fg:x="5501" fg:w="11"/><text x="53.5956%" y="334.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:671) (30 samples, 0.29%)</title><rect x="53.1711%" y="292" width="0.2909%" height="15" fill="rgb(207,120,37)" fg:x="5483" fg:w="30"/><text x="53.4211%" y="302.50"></text></g><g><title>unicode_join (python3.10) (22 samples, 0.21%)</title><rect x="53.2486%" y="308" width="0.2133%" height="15" fill="rgb(227,98,0)" fg:x="5491" fg:w="22"/><text x="53.4986%" y="318.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:677) (11 samples, 0.11%)</title><rect x="53.6074%" y="292" width="0.1067%" height="15" fill="rgb(207,7,3)" fg:x="5528" fg:w="11"/><text x="53.8574%" y="302.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:681) (33 samples, 0.32%)</title><rect x="53.7820%" y="292" width="0.3200%" height="15" fill="rgb(206,98,19)" fg:x="5546" fg:w="33"/><text x="54.0320%" y="302.50"></text></g><g><title>cached_tensordot (opt_einsum/sharing.py:139) (14 samples, 0.14%)</title><rect x="54.2087%" y="308" width="0.1358%" height="15" fill="rgb(217,5,26)" fg:x="5590" fg:w="14"/><text x="54.4587%" y="318.50"></text></g><g><title>currently_sharing (opt_einsum/sharing.py:35) (11 samples, 0.11%)</title><rect x="54.2378%" y="324" width="0.1067%" height="15" fill="rgb(235,190,38)" fg:x="5593" fg:w="11"/><text x="54.4878%" y="334.50"></text></g><g><title>_tensordot (opt_einsum/contract.py:469) (20 samples, 0.19%)</title><rect x="54.4026%" y="324" width="0.1939%" height="15" fill="rgb(247,86,24)" fg:x="5610" fg:w="20"/><text x="54.6526%" y="334.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1163) (24 samples, 0.23%)</title><rect x="55.4500%" y="356" width="0.2327%" height="15" fill="rgb(205,101,16)" fg:x="5718" fg:w="24"/><text x="55.7000%" y="366.50"></text></g><g><title>&lt;listcomp&gt; (numpy/_core/numeric.py:1163) (13 samples, 0.13%)</title><rect x="55.5566%" y="372" width="0.1261%" height="15" fill="rgb(246,168,33)" fg:x="5729" fg:w="13"/><text x="55.8066%" y="382.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1165) (14 samples, 0.14%)</title><rect x="55.6827%" y="356" width="0.1358%" height="15" fill="rgb(231,114,1)" fg:x="5742" fg:w="14"/><text x="55.9327%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1166) (12 samples, 0.12%)</title><rect x="55.8185%" y="356" width="0.1164%" height="15" fill="rgb(207,184,53)" fg:x="5756" fg:w="12"/><text x="56.0685%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1169) (17 samples, 0.16%)</title><rect x="55.9736%" y="356" width="0.1649%" height="15" fill="rgb(224,95,51)" fg:x="5772" fg:w="17"/><text x="56.2236%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1171) (11 samples, 0.11%)</title><rect x="56.1385%" y="356" width="0.1067%" height="15" fill="rgb(212,188,45)" fg:x="5789" fg:w="11"/><text x="56.3885%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1172) (11 samples, 0.11%)</title><rect x="56.2452%" y="356" width="0.1067%" height="15" fill="rgb(223,154,38)" fg:x="5800" fg:w="11"/><text x="56.4952%" y="366.50"></text></g><g><title>_aligned_strided_to_contig_size8 (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (32 samples, 0.31%)</title><rect x="57.0888%" y="452" width="0.3103%" height="15" fill="rgb(251,22,52)" fg:x="5887" fg:w="32"/><text x="57.3388%" y="462.50"></text></g><g><title>0x7245ae388af4 (libc.so.6) (11 samples, 0.11%)</title><rect x="57.7967%" y="468" width="0.1067%" height="15" fill="rgb(229,209,22)" fg:x="5960" fg:w="11"/><text x="58.0467%" y="478.50"></text></g><g><title>PyArray_AssignArray (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (148 samples, 1.44%)</title><rect x="56.5555%" y="420" width="1.4352%" height="15" fill="rgb(234,138,34)" fg:x="5832" fg:w="148"/><text x="56.8055%" y="430.50"></text></g><g><title>raw_array_assign_array (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (147 samples, 1.43%)</title><rect x="56.5652%" y="436" width="1.4255%" height="15" fill="rgb(212,95,11)" fg:x="5833" fg:w="147"/><text x="56.8152%" y="446.50"></text></g><g><title>_contig_to_contig (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (61 samples, 0.59%)</title><rect x="57.3991%" y="452" width="0.5915%" height="15" fill="rgb(240,179,47)" fg:x="5919" fg:w="61"/><text x="57.6491%" y="462.50"></text></g><g><title>array_reshape (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (160 samples, 1.55%)</title><rect x="56.5264%" y="372" width="1.5516%" height="15" fill="rgb(240,163,11)" fg:x="5829" fg:w="160"/><text x="56.7764%" y="382.50"></text></g><g><title>_reshape_with_copy_arg (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (157 samples, 1.52%)</title><rect x="56.5555%" y="388" width="1.5225%" height="15" fill="rgb(236,37,12)" fg:x="5832" fg:w="157"/><text x="56.8055%" y="398.50"></text></g><g><title>PyArray_NewCopy (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (157 samples, 1.52%)</title><rect x="56.5555%" y="404" width="1.5225%" height="15" fill="rgb(232,164,16)" fg:x="5832" fg:w="157"/><text x="56.8055%" y="414.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1175) (178 samples, 1.73%)</title><rect x="56.4294%" y="356" width="1.7261%" height="15" fill="rgb(244,205,15)" fg:x="5819" fg:w="178"/><text x="56.6794%" y="366.50"></text></g><g><title>_aligned_strided_to_contig_size8 (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (25 samples, 0.24%)</title><rect x="58.4659%" y="452" width="0.2424%" height="15" fill="rgb(223,117,47)" fg:x="6029" fg:w="25"/><text x="58.7159%" y="462.50"></text></g><g><title>_contig_to_contig (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (16 samples, 0.16%)</title><rect x="58.7083%" y="452" width="0.1552%" height="15" fill="rgb(244,107,35)" fg:x="6054" fg:w="16"/><text x="58.9583%" y="462.50"></text></g><g><title>PyArray_AssignArray (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (59 samples, 0.57%)</title><rect x="58.3107%" y="420" width="0.5721%" height="15" fill="rgb(205,140,8)" fg:x="6013" fg:w="59"/><text x="58.5607%" y="430.50"></text></g><g><title>raw_array_assign_array (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (57 samples, 0.55%)</title><rect x="58.3301%" y="436" width="0.5528%" height="15" fill="rgb(228,84,46)" fg:x="6015" fg:w="57"/><text x="58.5801%" y="446.50"></text></g><g><title>PyArray_NewCopy (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (62 samples, 0.60%)</title><rect x="58.3107%" y="404" width="0.6012%" height="15" fill="rgb(254,188,9)" fg:x="6013" fg:w="62"/><text x="58.5607%" y="414.50"></text></g><g><title>array_reshape (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (76 samples, 0.74%)</title><rect x="58.2137%" y="372" width="0.7370%" height="15" fill="rgb(206,112,54)" fg:x="6003" fg:w="76"/><text x="58.4637%" y="382.50"></text></g><g><title>_reshape_with_copy_arg (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (67 samples, 0.65%)</title><rect x="58.3010%" y="388" width="0.6497%" height="15" fill="rgb(216,84,49)" fg:x="6012" fg:w="67"/><text x="58.5510%" y="398.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1176) (89 samples, 0.86%)</title><rect x="58.1555%" y="356" width="0.8631%" height="15" fill="rgb(214,194,35)" fg:x="5997" fg:w="89"/><text x="58.4055%" y="366.50"></text></g><g><title>0x7245ae3894ca (libc.so.6) (34 samples, 0.33%)</title><rect x="59.2611%" y="436" width="0.3297%" height="15" fill="rgb(249,28,3)" fg:x="6111" fg:w="34"/><text x="59.5111%" y="446.50"></text></g><g><title>dgemm_kernel_HASWELL (libopenblasp-r0.3.29.so) (18 samples, 0.17%)</title><rect x="59.9011%" y="516" width="0.1746%" height="15" fill="rgb(222,56,52)" fg:x="6177" fg:w="18"/><text x="60.1511%" y="526.50"></text></g><g><title>dsyrk_LN (libopenblasp-r0.3.29.so) (60 samples, 0.58%)</title><rect x="59.6490%" y="500" width="0.5818%" height="15" fill="rgb(245,217,50)" fg:x="6151" fg:w="60"/><text x="59.8990%" y="510.50"></text></g><g><title>dgemv_n_HASWELL (libopenblasp-r0.3.29.so) (16 samples, 0.16%)</title><rect x="60.0756%" y="516" width="0.1552%" height="15" fill="rgb(213,201,24)" fg:x="6195" fg:w="16"/><text x="60.3256%" y="526.50"></text></g><g><title>dsyrk_LT (libopenblasp-r0.3.29.so) (16 samples, 0.16%)</title><rect x="60.2308%" y="500" width="0.1552%" height="15" fill="rgb(248,116,28)" fg:x="6211" fg:w="16"/><text x="60.4808%" y="510.50"></text></g><g><title>dsyrk_LT (libopenblasp-r0.3.29.so) (111 samples, 1.08%)</title><rect x="59.6393%" y="452" width="1.0764%" height="15" fill="rgb(219,72,43)" fg:x="6150" fg:w="111"/><text x="59.8893%" y="462.50"></text></g><g><title>dsyrk_UT (libopenblasp-r0.3.29.so) (111 samples, 1.08%)</title><rect x="59.6393%" y="468" width="1.0764%" height="15" fill="rgb(209,138,14)" fg:x="6150" fg:w="111"/><text x="59.8893%" y="478.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (111 samples, 1.08%)</title><rect x="59.6393%" y="484" width="1.0764%" height="15" fill="rgb(222,18,33)" fg:x="6150" fg:w="111"/><text x="59.8893%" y="494.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (34 samples, 0.33%)</title><rect x="60.3860%" y="500" width="0.3297%" height="15" fill="rgb(213,199,7)" fg:x="6227" fg:w="34"/><text x="60.6360%" y="510.50"></text></g><g><title>dsyr2k_LT (libopenblasp-r0.3.29.so) (12 samples, 0.12%)</title><rect x="60.7254%" y="500" width="0.1164%" height="15" fill="rgb(250,110,10)" fg:x="6262" fg:w="12"/><text x="60.9754%" y="510.50"></text></g><g><title>dgemm_kernel_HASWELL (libopenblasp-r0.3.29.so) (12 samples, 0.12%)</title><rect x="60.7254%" y="516" width="0.1164%" height="15" fill="rgb(248,123,6)" fg:x="6262" fg:w="12"/><text x="60.9754%" y="526.50"></text></g><g><title>dsyrk_kernel_L (libopenblasp-r0.3.29.so) (20 samples, 0.19%)</title><rect x="60.7157%" y="452" width="0.1939%" height="15" fill="rgb(206,91,31)" fg:x="6261" fg:w="20"/><text x="60.9657%" y="462.50"></text></g><g><title>dsyr2k_LT (libopenblasp-r0.3.29.so) (20 samples, 0.19%)</title><rect x="60.7157%" y="468" width="0.1939%" height="15" fill="rgb(211,154,13)" fg:x="6261" fg:w="20"/><text x="60.9657%" y="478.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (19 samples, 0.18%)</title><rect x="60.7254%" y="484" width="0.1843%" height="15" fill="rgb(225,148,7)" fg:x="6262" fg:w="19"/><text x="60.9754%" y="494.50"></text></g><g><title>dgemm_kernel_HASWELL (libopenblasp-r0.3.29.so) (42 samples, 0.41%)</title><rect x="60.9193%" y="468" width="0.4073%" height="15" fill="rgb(220,160,43)" fg:x="6282" fg:w="42"/><text x="61.1693%" y="478.50"></text></g><g><title>gemm_driver.isra.0 (libopenblasp-r0.3.29.so) (47 samples, 0.46%)</title><rect x="60.9096%" y="452" width="0.4558%" height="15" fill="rgb(213,52,39)" fg:x="6281" fg:w="47"/><text x="61.1596%" y="462.50"></text></g><g><title>dgemm_kernel_HASWELL (libopenblasp-r0.3.29.so) (90 samples, 0.87%)</title><rect x="61.3848%" y="468" width="0.8728%" height="15" fill="rgb(243,137,7)" fg:x="6330" fg:w="90"/><text x="61.6348%" y="478.50"></text></g><g><title>cblas_dger (libopenblasp-r0.3.29.so) (283 samples, 2.74%)</title><rect x="59.6296%" y="436" width="2.7444%" height="15" fill="rgb(230,79,13)" fg:x="6149" fg:w="283"/><text x="59.8796%" y="446.50">cb..</text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (104 samples, 1.01%)</title><rect x="61.3654%" y="452" width="1.0085%" height="15" fill="rgb(247,105,23)" fg:x="6328" fg:w="104"/><text x="61.6154%" y="462.50"></text></g><g><title>PyArray_MatrixProduct2 (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (349 samples, 3.38%)</title><rect x="59.1350%" y="404" width="3.3844%" height="15" fill="rgb(223,179,41)" fg:x="6098" fg:w="349"/><text x="59.3850%" y="414.50">PyA..</text></g><g><title>cblas_matrixproduct (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (336 samples, 3.26%)</title><rect x="59.2611%" y="420" width="3.2583%" height="15" fill="rgb(218,9,34)" fg:x="6111" fg:w="336"/><text x="59.5111%" y="430.50">cbl..</text></g><g><title>array_matrixproduct (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (351 samples, 3.40%)</title><rect x="59.1350%" y="388" width="3.4038%" height="15" fill="rgb(222,106,8)" fg:x="6098" fg:w="351"/><text x="59.3850%" y="398.50">arr..</text></g><g><title>tensordot (numpy/_core/numeric.py:1177) (364 samples, 3.53%)</title><rect x="59.0186%" y="356" width="3.5299%" height="15" fill="rgb(211,220,0)" fg:x="6086" fg:w="364"/><text x="59.2686%" y="366.50">ten..</text></g><g><title>dispatcher_vectorcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (362 samples, 3.51%)</title><rect x="59.0380%" y="372" width="3.5105%" height="15" fill="rgb(229,52,16)" fg:x="6088" fg:w="362"/><text x="59.2880%" y="382.50">dis..</text></g><g><title>_core_contract (opt_einsum/contract.py:687) (886 samples, 8.59%)</title><rect x="54.1020%" y="292" width="8.5919%" height="15" fill="rgb(212,155,18)" fg:x="5579" fg:w="886"/><text x="54.3520%" y="302.50">_core_contra..</text></g><g><title>cached_tensordot (opt_einsum/sharing.py:140) (861 samples, 8.35%)</title><rect x="54.3445%" y="308" width="8.3495%" height="15" fill="rgb(242,21,14)" fg:x="5604" fg:w="861"/><text x="54.5945%" y="318.50">cached_tenso..</text></g><g><title>_tensordot (opt_einsum/contract.py:470) (835 samples, 8.10%)</title><rect x="54.5966%" y="324" width="8.0974%" height="15" fill="rgb(222,19,48)" fg:x="5630" fg:w="835"/><text x="54.8466%" y="334.50">_tensordot ..</text></g><g><title>dispatcher_vectorcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (834 samples, 8.09%)</title><rect x="54.6063%" y="340" width="8.0877%" height="15" fill="rgb(232,45,27)" fg:x="5631" fg:w="834"/><text x="54.8563%" y="350.50">dispatcher_..</text></g><g><title>tensordot (numpy/_core/numeric.py:1178) (15 samples, 0.15%)</title><rect x="62.5485%" y="356" width="0.1455%" height="15" fill="rgb(249,103,42)" fg:x="6450" fg:w="15"/><text x="62.7985%" y="366.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:692) (16 samples, 0.16%)</title><rect x="62.8006%" y="292" width="0.1552%" height="15" fill="rgb(246,81,33)" fg:x="6476" fg:w="16"/><text x="63.0506%" y="302.50"></text></g><g><title>_contract (opt_einsum/contract.py:816) (1,093 samples, 10.60%)</title><rect x="52.5213%" y="276" width="10.5993%" height="15" fill="rgb(252,33,42)" fg:x="5416" fg:w="1093"/><text x="52.7713%" y="286.50">_contract (opt_..</text></g><g><title>__call__ (opt_einsum/contract.py:895) (1,101 samples, 10.68%)</title><rect x="52.4631%" y="260" width="10.6769%" height="15" fill="rgb(209,212,41)" fg:x="5410" fg:w="1101"/><text x="52.7131%" y="270.50">__call__ (opt_ei..</text></g><g><title>dispatcher_vectorcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (14 samples, 0.14%)</title><rect x="63.1788%" y="260" width="0.1358%" height="15" fill="rgb(207,154,6)" fg:x="6515" fg:w="14"/><text x="63.4288%" y="270.50"></text></g><g><title>execute_ufunc_loop (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (21 samples, 0.20%)</title><rect x="63.3825%" y="276" width="0.2036%" height="15" fill="rgb(223,64,47)" fg:x="6536" fg:w="21"/><text x="63.6325%" y="286.50"></text></g><g><title>MatVecWrapper_matvec (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (1,196 samples, 11.60%)</title><rect x="52.0171%" y="244" width="11.5981%" height="15" fill="rgb(211,161,38)" fg:x="5364" fg:w="1196"/><text x="52.2671%" y="254.50">MatVecWrapper_mat..</text></g><g><title>ufunc_generic_fastcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (30 samples, 0.29%)</title><rect x="63.3243%" y="260" width="0.2909%" height="15" fill="rgb(219,138,40)" fg:x="6530" fg:w="30"/><text x="63.5743%" y="270.50"></text></g><g><title>__Pyx_CyFunction_CallAsMethod (_yaml.c:30402) (13 samples, 0.13%)</title><rect x="63.6152%" y="244" width="0.1261%" height="15" fill="rgb(241,228,46)" fg:x="6560" fg:w="13"/><text x="63.8652%" y="254.50"></text></g><g><title>__Pyx_PyVectorcall_FastCallDict (_yaml.c:29715) (13 samples, 0.13%)</title><rect x="63.6152%" y="260" width="0.1261%" height="15" fill="rgb(223,209,38)" fg:x="6560" fg:w="13"/><text x="63.8652%" y="270.50"></text></g><g><title>__Pyx_PyVectorcall_FastCallDict_kw (_yaml.c:29702) (12 samples, 0.12%)</title><rect x="63.6249%" y="276" width="0.1164%" height="15" fill="rgb(236,164,45)" fg:x="6561" fg:w="12"/><text x="63.8749%" y="286.50"></text></g><g><title>qr_insert (scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so) (12 samples, 0.12%)</title><rect x="63.6249%" y="292" width="0.1164%" height="15" fill="rgb(231,15,5)" fg:x="6561" fg:w="12"/><text x="63.8749%" y="302.50"></text></g><g><title>__Pyx_PyObject_to_MemoryviewSlice_ds_double.constprop.0 (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (24 samples, 0.23%)</title><rect x="63.7413%" y="244" width="0.2327%" height="15" fill="rgb(252,35,15)" fg:x="6573" fg:w="24"/><text x="63.9913%" y="254.50"></text></g><g><title>__Pyx_ValidateAndInit_memviewslice.constprop.0 (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (24 samples, 0.23%)</title><rect x="63.7413%" y="260" width="0.2327%" height="15" fill="rgb(248,181,18)" fg:x="6573" fg:w="24"/><text x="63.9913%" y="270.50"></text></g><g><title>__pyx_memoryview_new (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (15 samples, 0.15%)</title><rect x="63.8285%" y="276" width="0.1455%" height="15" fill="rgb(233,39,42)" fg:x="6582" fg:w="15"/><text x="64.0785%" y="286.50"></text></g><g><title>__pyx_tp_new_memoryview (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (11 samples, 0.11%)</title><rect x="63.8673%" y="292" width="0.1067%" height="15" fill="rgb(238,110,33)" fg:x="6586" fg:w="11"/><text x="64.1173%" y="302.50"></text></g><g><title>array_assign_subscript (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (15 samples, 0.15%)</title><rect x="64.1874%" y="244" width="0.1455%" height="15" fill="rgb(233,195,10)" fg:x="6619" fg:w="15"/><text x="64.4374%" y="254.50"></text></g><g><title>lgmres_cy_cy_dgelsd (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (16 samples, 0.16%)</title><rect x="64.4977%" y="244" width="0.1552%" height="15" fill="rgb(254,105,3)" fg:x="6651" fg:w="16"/><text x="64.7477%" y="254.50"></text></g><g><title>dgeesx_ (libopenblasp-r0.3.29.so) (16 samples, 0.16%)</title><rect x="64.4977%" y="260" width="0.1552%" height="15" fill="rgb(221,225,9)" fg:x="6651" fg:w="16"/><text x="64.7477%" y="270.50"></text></g><g><title>sneg_tcopy_HASWELL (libopenblasp-r0.3.29.so) (12 samples, 0.12%)</title><rect x="64.7304%" y="244" width="0.1164%" height="15" fill="rgb(224,227,45)" fg:x="6675" fg:w="12"/><text x="64.9804%" y="254.50"></text></g><g><title>sneg_tcopy_HASWELL (libopenblasp-r0.3.29.so) (12 samples, 0.12%)</title><rect x="64.7304%" y="260" width="0.1164%" height="15" fill="rgb(229,198,43)" fg:x="6675" fg:w="12"/><text x="64.9804%" y="270.50"></text></g><g><title>lgmres_cy__fgmres (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (1,353 samples, 13.12%)</title><rect x="51.8037%" y="228" width="13.1206%" height="15" fill="rgb(206,209,35)" fg:x="5342" fg:w="1353"/><text x="52.0537%" y="238.50">lgmres_cy__fgmres (c..</text></g><g><title>lgmres_cy_lgmres.constprop.0 (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (1,395 samples, 13.53%)</title><rect x="51.4740%" y="212" width="13.5279%" height="15" fill="rgb(245,195,53)" fg:x="5308" fg:w="1395"/><text x="51.7240%" y="222.50">lgmres_cy_lgmres.con..</text></g><g><title>_ipm_local_solver (src/tt_ipm.py:125) (1,397 samples, 13.55%)</title><rect x="51.4740%" y="180" width="13.5473%" height="15" fill="rgb(240,92,26)" fg:x="5308" fg:w="1397"/><text x="51.7240%" y="190.50">_ipm_local_solver (s..</text></g><g><title>lgmres (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (1,397 samples, 13.55%)</title><rect x="51.4740%" y="196" width="13.5473%" height="15" fill="rgb(207,40,23)" fg:x="5308" fg:w="1397"/><text x="51.7240%" y="206.50">lgmres (cy_src/lgmre..</text></g><g><title>_ipm_local_solver (src/tt_ipm.py:130) (13 samples, 0.13%)</title><rect x="65.0310%" y="180" width="0.1261%" height="15" fill="rgb(223,111,35)" fg:x="6706" fg:w="13"/><text x="65.2810%" y="190.50"></text></g><g><title>forward_backward_sub (src/tt_ipm.py:30) (11 samples, 0.11%)</title><rect x="65.3801%" y="196" width="0.1067%" height="15" fill="rgb(229,147,28)" fg:x="6742" fg:w="11"/><text x="65.6301%" y="206.50"></text></g><g><title>solve_triangular (scipy/linalg/_basic.py:498) (11 samples, 0.11%)</title><rect x="65.3801%" y="212" width="0.1067%" height="15" fill="rgb(211,29,28)" fg:x="6742" fg:w="11"/><text x="65.6301%" y="222.50"></text></g><g><title>_solve_triangular (scipy/linalg/_basic.py:513) (11 samples, 0.11%)</title><rect x="65.3801%" y="228" width="0.1067%" height="15" fill="rgb(228,72,33)" fg:x="6742" fg:w="11"/><text x="65.6301%" y="238.50"></text></g><g><title>f2py_rout__flapack_dtrtrs (scipy/linalg/_flapack.cpython-310-x86_64-linux-gnu.so) (11 samples, 0.11%)</title><rect x="65.3801%" y="244" width="0.1067%" height="15" fill="rgb(205,214,31)" fg:x="6742" fg:w="11"/><text x="65.6301%" y="254.50"></text></g><g><title>dgemmtr_ (libopenblasp-r0.3.29.so) (11 samples, 0.11%)</title><rect x="65.3801%" y="260" width="0.1067%" height="15" fill="rgb(224,111,15)" fg:x="6742" fg:w="11"/><text x="65.6301%" y="270.50"></text></g><g><title>ctrtri_UU_parallel.localalias (libopenblasp-r0.3.29.so) (11 samples, 0.11%)</title><rect x="65.3801%" y="276" width="0.1067%" height="15" fill="rgb(253,21,26)" fg:x="6742" fg:w="11"/><text x="65.6301%" y="286.50"></text></g><g><title>gemm_driver (libopenblasp-r0.3.29.so) (11 samples, 0.11%)</title><rect x="65.3801%" y="292" width="0.1067%" height="15" fill="rgb(245,139,43)" fg:x="6742" fg:w="11"/><text x="65.6301%" y="302.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (11 samples, 0.11%)</title><rect x="65.3801%" y="308" width="0.1067%" height="15" fill="rgb(252,170,7)" fg:x="6742" fg:w="11"/><text x="65.6301%" y="318.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (11 samples, 0.11%)</title><rect x="65.3801%" y="324" width="0.1067%" height="15" fill="rgb(231,118,14)" fg:x="6742" fg:w="11"/><text x="65.6301%" y="334.50"></text></g><g><title>_ipm_local_solver (src/tt_ipm.py:97) (23 samples, 0.22%)</title><rect x="65.3123%" y="180" width="0.2230%" height="15" fill="rgb(238,83,0)" fg:x="6735" fg:w="23"/><text x="65.5623%" y="190.50"></text></g><g><title>_bck_sweep (src/tt_als.py:217) (1,631 samples, 15.82%)</title><rect x="49.7964%" y="164" width="15.8165%" height="15" fill="rgb(221,39,39)" fg:x="5135" fg:w="1631"/><text x="50.0464%" y="174.50">_bck_sweep (src/tt_als.p..</text></g><g><title>tt_block_als (src/tt_als.py:403) (1,658 samples, 16.08%)</title><rect x="49.7964%" y="148" width="16.0784%" height="15" fill="rgb(222,119,46)" fg:x="5135" fg:w="1658"/><text x="50.0464%" y="158.50">tt_block_als (src/tt_als...</text></g><g><title>dgbcon_ (libopenblasp-r0.3.29.so) (86 samples, 0.83%)</title><rect x="65.9038%" y="260" width="0.8340%" height="15" fill="rgb(222,165,49)" fg:x="6796" fg:w="86"/><text x="66.1538%" y="270.50"></text></g><g><title>dlaqr4_ (libopenblasp-r0.3.29.so) (86 samples, 0.83%)</title><rect x="65.9038%" y="276" width="0.8340%" height="15" fill="rgb(219,113,52)" fg:x="6796" fg:w="86"/><text x="66.1538%" y="286.50"></text></g><g><title>cblas_sgemmt (libopenblasp-r0.3.29.so) (86 samples, 0.83%)</title><rect x="65.9038%" y="292" width="0.8340%" height="15" fill="rgb(214,7,15)" fg:x="6796" fg:w="86"/><text x="66.1538%" y="302.50"></text></g><g><title>dspmv_L (libopenblasp-r0.3.29.so) (84 samples, 0.81%)</title><rect x="65.9232%" y="308" width="0.8146%" height="15" fill="rgb(235,32,4)" fg:x="6798" fg:w="84"/><text x="66.1732%" y="318.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (84 samples, 0.81%)</title><rect x="65.9232%" y="324" width="0.8146%" height="15" fill="rgb(238,90,54)" fg:x="6798" fg:w="84"/><text x="66.1732%" y="334.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (82 samples, 0.80%)</title><rect x="65.9426%" y="340" width="0.7952%" height="15" fill="rgb(213,208,19)" fg:x="6800" fg:w="82"/><text x="66.1926%" y="350.50"></text></g><g><title>dgbequ_ (libopenblasp-r0.3.29.so) (93 samples, 0.90%)</title><rect x="65.8844%" y="244" width="0.9019%" height="15" fill="rgb(233,156,4)" fg:x="6794" fg:w="93"/><text x="66.1344%" y="254.50"></text></g><g><title>lstsq (scipy/linalg/_basic.py:1470) (107 samples, 1.04%)</title><rect x="65.8844%" y="196" width="1.0376%" height="15" fill="rgb(207,194,5)" fg:x="6794" fg:w="107"/><text x="66.1344%" y="206.50"></text></g><g><title>f2py_rout__flapack_dgelsd (scipy/linalg/_flapack.cpython-310-x86_64-linux-gnu.so) (107 samples, 1.04%)</title><rect x="65.8844%" y="212" width="1.0376%" height="15" fill="rgb(206,111,30)" fg:x="6794" fg:w="107"/><text x="66.1344%" y="222.50"></text></g><g><title>dgeesx_ (libopenblasp-r0.3.29.so) (107 samples, 1.04%)</title><rect x="65.8844%" y="228" width="1.0376%" height="15" fill="rgb(243,70,54)" fg:x="6794" fg:w="107"/><text x="66.1344%" y="238.50"></text></g><g><title>_ipm_local_solver (src/tt_ipm.py:103) (108 samples, 1.05%)</title><rect x="65.8844%" y="180" width="1.0473%" height="15" fill="rgb(242,28,8)" fg:x="6794" fg:w="108"/><text x="66.1344%" y="190.50"></text></g><g><title>__call__ (opt_einsum/contract.py:895) (33 samples, 0.32%)</title><rect x="66.9899%" y="244" width="0.3200%" height="15" fill="rgb(219,106,18)" fg:x="6908" fg:w="33"/><text x="67.2399%" y="254.50"></text></g><g><title>_contract (opt_einsum/contract.py:816) (33 samples, 0.32%)</title><rect x="66.9899%" y="260" width="0.3200%" height="15" fill="rgb(244,222,10)" fg:x="6908" fg:w="33"/><text x="67.2399%" y="270.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:687) (28 samples, 0.27%)</title><rect x="67.0384%" y="276" width="0.2715%" height="15" fill="rgb(236,179,52)" fg:x="6913" fg:w="28"/><text x="67.2884%" y="286.50"></text></g><g><title>cached_tensordot (opt_einsum/sharing.py:140) (27 samples, 0.26%)</title><rect x="67.0481%" y="292" width="0.2618%" height="15" fill="rgb(213,23,39)" fg:x="6914" fg:w="27"/><text x="67.2981%" y="302.50"></text></g><g><title>_tensordot (opt_einsum/contract.py:470) (27 samples, 0.26%)</title><rect x="67.0481%" y="308" width="0.2618%" height="15" fill="rgb(238,48,10)" fg:x="6914" fg:w="27"/><text x="67.2981%" y="318.50"></text></g><g><title>dispatcher_vectorcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (27 samples, 0.26%)</title><rect x="67.0481%" y="324" width="0.2618%" height="15" fill="rgb(251,196,23)" fg:x="6914" fg:w="27"/><text x="67.2981%" y="334.50"></text></g><g><title>MatVecWrapper_matvec (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (36 samples, 0.35%)</title><rect x="66.9899%" y="228" width="0.3491%" height="15" fill="rgb(250,152,24)" fg:x="6908" fg:w="36"/><text x="67.2399%" y="238.50"></text></g><g><title>__call__ (opt_einsum/contract.py:872) (11 samples, 0.11%)</title><rect x="67.7948%" y="260" width="0.1067%" height="15" fill="rgb(209,150,17)" fg:x="6991" fg:w="11"/><text x="68.0448%" y="270.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:660) (15 samples, 0.15%)</title><rect x="68.1633%" y="292" width="0.1455%" height="15" fill="rgb(234,202,34)" fg:x="7029" fg:w="15"/><text x="68.4133%" y="302.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:671) (46 samples, 0.45%)</title><rect x="68.5318%" y="292" width="0.4461%" height="15" fill="rgb(253,148,53)" fg:x="7067" fg:w="46"/><text x="68.7818%" y="302.50"></text></g><g><title>unicode_join (python3.10) (29 samples, 0.28%)</title><rect x="68.6967%" y="308" width="0.2812%" height="15" fill="rgb(218,129,16)" fg:x="7084" fg:w="29"/><text x="68.9467%" y="318.50"></text></g><g><title>&lt;genexpr&gt; (opt_einsum/contract.py:671) (16 samples, 0.16%)</title><rect x="68.8227%" y="324" width="0.1552%" height="15" fill="rgb(216,85,19)" fg:x="7097" fg:w="16"/><text x="69.0727%" y="334.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:681) (37 samples, 0.36%)</title><rect x="69.2106%" y="292" width="0.3588%" height="15" fill="rgb(235,228,7)" fg:x="7137" fg:w="37"/><text x="69.4606%" y="302.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1150) (12 samples, 0.12%)</title><rect x="70.4325%" y="356" width="0.1164%" height="15" fill="rgb(245,175,0)" fg:x="7263" fg:w="12"/><text x="70.6825%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1163) (16 samples, 0.16%)</title><rect x="70.5780%" y="356" width="0.1552%" height="15" fill="rgb(208,168,36)" fg:x="7278" fg:w="16"/><text x="70.8280%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1165) (15 samples, 0.15%)</title><rect x="70.7525%" y="356" width="0.1455%" height="15" fill="rgb(246,171,24)" fg:x="7296" fg:w="15"/><text x="71.0025%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1166) (13 samples, 0.13%)</title><rect x="70.8980%" y="356" width="0.1261%" height="15" fill="rgb(215,142,24)" fg:x="7311" fg:w="13"/><text x="71.1480%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1169) (11 samples, 0.11%)</title><rect x="71.1113%" y="356" width="0.1067%" height="15" fill="rgb(250,187,7)" fg:x="7333" fg:w="11"/><text x="71.3613%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1171) (17 samples, 0.16%)</title><rect x="71.2374%" y="356" width="0.1649%" height="15" fill="rgb(228,66,33)" fg:x="7346" fg:w="17"/><text x="71.4874%" y="366.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1172) (11 samples, 0.11%)</title><rect x="71.4022%" y="356" width="0.1067%" height="15" fill="rgb(234,215,21)" fg:x="7363" fg:w="11"/><text x="71.6522%" y="366.50"></text></g><g><title>_aligned_strided_to_contig_size8 (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (29 samples, 0.28%)</title><rect x="71.9938%" y="452" width="0.2812%" height="15" fill="rgb(222,191,20)" fg:x="7424" fg:w="29"/><text x="72.2438%" y="462.50"></text></g><g><title>_contig_to_contig (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (53 samples, 0.51%)</title><rect x="72.2750%" y="452" width="0.5140%" height="15" fill="rgb(245,79,54)" fg:x="7453" fg:w="53"/><text x="72.5250%" y="462.50"></text></g><g><title>PyArray_AssignArray (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (118 samples, 1.14%)</title><rect x="71.6835%" y="420" width="1.1443%" height="15" fill="rgb(240,10,37)" fg:x="7392" fg:w="118"/><text x="71.9335%" y="430.50"></text></g><g><title>raw_array_assign_array (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (118 samples, 1.14%)</title><rect x="71.6835%" y="436" width="1.1443%" height="15" fill="rgb(214,192,32)" fg:x="7392" fg:w="118"/><text x="71.9335%" y="446.50"></text></g><g><title>array_reshape (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (129 samples, 1.25%)</title><rect x="71.6447%" y="372" width="1.2510%" height="15" fill="rgb(209,36,54)" fg:x="7388" fg:w="129"/><text x="71.8947%" y="382.50"></text></g><g><title>_reshape_with_copy_arg (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (125 samples, 1.21%)</title><rect x="71.6835%" y="388" width="1.2122%" height="15" fill="rgb(220,10,11)" fg:x="7392" fg:w="125"/><text x="71.9335%" y="398.50"></text></g><g><title>PyArray_NewCopy (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (125 samples, 1.21%)</title><rect x="71.6835%" y="404" width="1.2122%" height="15" fill="rgb(221,106,17)" fg:x="7392" fg:w="125"/><text x="71.9335%" y="414.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1175) (141 samples, 1.37%)</title><rect x="71.5865%" y="356" width="1.3673%" height="15" fill="rgb(251,142,44)" fg:x="7382" fg:w="141"/><text x="71.8365%" y="366.50"></text></g><g><title>_aligned_strided_to_contig_size8 (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (13 samples, 0.13%)</title><rect x="73.1284%" y="452" width="0.1261%" height="15" fill="rgb(238,13,15)" fg:x="7541" fg:w="13"/><text x="73.3784%" y="462.50"></text></g><g><title>PyArray_AssignArray (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (40 samples, 0.39%)</title><rect x="72.9926%" y="420" width="0.3879%" height="15" fill="rgb(208,107,27)" fg:x="7527" fg:w="40"/><text x="73.2426%" y="430.50"></text></g><g><title>raw_array_assign_array (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (38 samples, 0.37%)</title><rect x="73.0120%" y="436" width="0.3685%" height="15" fill="rgb(205,136,37)" fg:x="7529" fg:w="38"/><text x="73.2620%" y="446.50"></text></g><g><title>_contig_to_contig (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (13 samples, 0.13%)</title><rect x="73.2545%" y="452" width="0.1261%" height="15" fill="rgb(250,205,27)" fg:x="7554" fg:w="13"/><text x="73.5045%" y="462.50"></text></g><g><title>array_reshape (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (42 samples, 0.41%)</title><rect x="72.9829%" y="372" width="0.4073%" height="15" fill="rgb(210,80,43)" fg:x="7526" fg:w="42"/><text x="73.2329%" y="382.50"></text></g><g><title>_reshape_with_copy_arg (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (41 samples, 0.40%)</title><rect x="72.9926%" y="388" width="0.3976%" height="15" fill="rgb(247,160,36)" fg:x="7527" fg:w="41"/><text x="73.2426%" y="398.50"></text></g><g><title>PyArray_NewCopy (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (41 samples, 0.40%)</title><rect x="72.9926%" y="404" width="0.3976%" height="15" fill="rgb(234,13,49)" fg:x="7527" fg:w="41"/><text x="73.2426%" y="414.50"></text></g><g><title>tensordot (numpy/_core/numeric.py:1176) (52 samples, 0.50%)</title><rect x="72.9538%" y="356" width="0.5043%" height="15" fill="rgb(234,122,0)" fg:x="7523" fg:w="52"/><text x="73.2038%" y="366.50"></text></g><g><title>0x7245ae3894ca (libc.so.6) (28 samples, 0.27%)</title><rect x="73.6811%" y="436" width="0.2715%" height="15" fill="rgb(207,146,38)" fg:x="7598" fg:w="28"/><text x="73.9311%" y="446.50"></text></g><g><title>dgemm_kernel_HASWELL (libopenblasp-r0.3.29.so) (13 samples, 0.13%)</title><rect x="74.2145%" y="516" width="0.1261%" height="15" fill="rgb(207,177,25)" fg:x="7653" fg:w="13"/><text x="74.4645%" y="526.50"></text></g><g><title>dsyrk_LN (libopenblasp-r0.3.29.so) (43 samples, 0.42%)</title><rect x="74.0109%" y="500" width="0.4170%" height="15" fill="rgb(211,178,42)" fg:x="7632" fg:w="43"/><text x="74.2609%" y="510.50"></text></g><g><title>dsyrk_LT (libopenblasp-r0.3.29.so) (11 samples, 0.11%)</title><rect x="74.4279%" y="500" width="0.1067%" height="15" fill="rgb(230,69,54)" fg:x="7675" fg:w="11"/><text x="74.6779%" y="510.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (89 samples, 0.86%)</title><rect x="74.0109%" y="484" width="0.8631%" height="15" fill="rgb(214,135,41)" fg:x="7632" fg:w="89"/><text x="74.2609%" y="494.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (35 samples, 0.34%)</title><rect x="74.5345%" y="500" width="0.3394%" height="15" fill="rgb(237,67,25)" fg:x="7686" fg:w="35"/><text x="74.7845%" y="510.50"></text></g><g><title>dsyrk_LT (libopenblasp-r0.3.29.so) (91 samples, 0.88%)</title><rect x="74.0012%" y="452" width="0.8825%" height="15" fill="rgb(222,189,50)" fg:x="7631" fg:w="91"/><text x="74.2512%" y="462.50"></text></g><g><title>dsyrk_UT (libopenblasp-r0.3.29.so) (91 samples, 0.88%)</title><rect x="74.0012%" y="468" width="0.8825%" height="15" fill="rgb(245,148,34)" fg:x="7631" fg:w="91"/><text x="74.2512%" y="478.50"></text></g><g><title>dgemm_kernel_HASWELL (libopenblasp-r0.3.29.so) (11 samples, 0.11%)</title><rect x="74.8836%" y="516" width="0.1067%" height="15" fill="rgb(222,29,6)" fg:x="7722" fg:w="11"/><text x="75.1336%" y="526.50"></text></g><g><title>dsyr2k_LT (libopenblasp-r0.3.29.so) (13 samples, 0.13%)</title><rect x="74.8836%" y="500" width="0.1261%" height="15" fill="rgb(221,189,43)" fg:x="7722" fg:w="13"/><text x="75.1336%" y="510.50"></text></g><g><title>dsyrk_kernel_L (libopenblasp-r0.3.29.so) (19 samples, 0.18%)</title><rect x="74.8836%" y="452" width="0.1843%" height="15" fill="rgb(207,36,27)" fg:x="7722" fg:w="19"/><text x="75.1336%" y="462.50"></text></g><g><title>dsyr2k_LT (libopenblasp-r0.3.29.so) (19 samples, 0.18%)</title><rect x="74.8836%" y="468" width="0.1843%" height="15" fill="rgb(217,90,24)" fg:x="7722" fg:w="19"/><text x="75.1336%" y="478.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (19 samples, 0.18%)</title><rect x="74.8836%" y="484" width="0.1843%" height="15" fill="rgb(224,66,35)" fg:x="7722" fg:w="19"/><text x="75.1336%" y="494.50"></text></g><g><title>dgemm_kernel_HASWELL (libopenblasp-r0.3.29.so) (25 samples, 0.24%)</title><rect x="75.0776%" y="468" width="0.2424%" height="15" fill="rgb(221,13,50)" fg:x="7742" fg:w="25"/><text x="75.3276%" y="478.50"></text></g><g><title>gemm_driver.isra.0 (libopenblasp-r0.3.29.so) (29 samples, 0.28%)</title><rect x="75.0679%" y="452" width="0.2812%" height="15" fill="rgb(236,68,49)" fg:x="7741" fg:w="29"/><text x="75.3179%" y="462.50"></text></g><g><title>dgemm_kernel_HASWELL (libopenblasp-r0.3.29.so) (80 samples, 0.78%)</title><rect x="75.4073%" y="468" width="0.7758%" height="15" fill="rgb(229,146,28)" fg:x="7776" fg:w="80"/><text x="75.6573%" y="478.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (95 samples, 0.92%)</title><rect x="75.3491%" y="452" width="0.9213%" height="15" fill="rgb(225,31,38)" fg:x="7770" fg:w="95"/><text x="75.5991%" y="462.50"></text></g><g><title>cblas_dger (libopenblasp-r0.3.29.so) (237 samples, 2.30%)</title><rect x="73.9818%" y="436" width="2.2983%" height="15" fill="rgb(250,208,3)" fg:x="7629" fg:w="237"/><text x="74.2318%" y="446.50">c..</text></g><g><title>array_matrixproduct (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (290 samples, 2.81%)</title><rect x="73.5357%" y="388" width="2.8123%" height="15" fill="rgb(246,54,23)" fg:x="7583" fg:w="290"/><text x="73.7857%" y="398.50">ar..</text></g><g><title>PyArray_MatrixProduct2 (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (290 samples, 2.81%)</title><rect x="73.5357%" y="404" width="2.8123%" height="15" fill="rgb(243,76,11)" fg:x="7583" fg:w="290"/><text x="73.7857%" y="414.50">Py..</text></g><g><title>cblas_matrixproduct (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (277 samples, 2.69%)</title><rect x="73.6618%" y="420" width="2.6862%" height="15" fill="rgb(245,21,50)" fg:x="7596" fg:w="277"/><text x="73.9118%" y="430.50">cb..</text></g><g><title>tensordot (numpy/_core/numeric.py:1177) (302 samples, 2.93%)</title><rect x="73.4581%" y="356" width="2.9286%" height="15" fill="rgb(228,9,43)" fg:x="7575" fg:w="302"/><text x="73.7081%" y="366.50">te..</text></g><g><title>dispatcher_vectorcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (300 samples, 2.91%)</title><rect x="73.4775%" y="372" width="2.9092%" height="15" fill="rgb(208,100,47)" fg:x="7577" fg:w="300"/><text x="73.7275%" y="382.50">di..</text></g><g><title>_core_contract (opt_einsum/contract.py:687) (714 samples, 6.92%)</title><rect x="69.5694%" y="292" width="6.9240%" height="15" fill="rgb(232,26,8)" fg:x="7174" fg:w="714"/><text x="69.8194%" y="302.50">_core_con..</text></g><g><title>cached_tensordot (opt_einsum/sharing.py:140) (699 samples, 6.78%)</title><rect x="69.7149%" y="308" width="6.7785%" height="15" fill="rgb(216,166,38)" fg:x="7189" fg:w="699"/><text x="69.9649%" y="318.50">cached_te..</text></g><g><title>_tensordot (opt_einsum/contract.py:470) (688 samples, 6.67%)</title><rect x="69.8216%" y="324" width="6.6718%" height="15" fill="rgb(251,202,51)" fg:x="7200" fg:w="688"/><text x="70.0716%" y="334.50">_tensordo..</text></g><g><title>dispatcher_vectorcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (686 samples, 6.65%)</title><rect x="69.8410%" y="340" width="6.6524%" height="15" fill="rgb(254,216,34)" fg:x="7202" fg:w="686"/><text x="70.0910%" y="350.50">dispatche..</text></g><g><title>tensordot (numpy/_core/numeric.py:1178) (11 samples, 0.11%)</title><rect x="76.3867%" y="356" width="0.1067%" height="15" fill="rgb(251,32,27)" fg:x="7877" fg:w="11"/><text x="76.6367%" y="366.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:692) (18 samples, 0.17%)</title><rect x="76.5613%" y="292" width="0.1746%" height="15" fill="rgb(208,127,28)" fg:x="7895" fg:w="18"/><text x="76.8113%" y="302.50"></text></g><g><title>cached_transpose (opt_einsum/sharing.py:121) (12 samples, 0.12%)</title><rect x="76.6195%" y="308" width="0.1164%" height="15" fill="rgb(224,137,22)" fg:x="7901" fg:w="12"/><text x="76.8695%" y="318.50"></text></g><g><title>_contract (opt_einsum/contract.py:816) (921 samples, 8.93%)</title><rect x="67.9984%" y="276" width="8.9313%" height="15" fill="rgb(254,70,32)" fg:x="7012" fg:w="921"/><text x="68.2484%" y="286.50">_contract (op..</text></g><g><title>__call__ (opt_einsum/contract.py:895) (925 samples, 8.97%)</title><rect x="67.9791%" y="260" width="8.9701%" height="15" fill="rgb(229,75,37)" fg:x="7010" fg:w="925"/><text x="68.2291%" y="270.50">__call__ (opt..</text></g><g><title>execute_ufunc_loop (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (13 samples, 0.13%)</title><rect x="77.0753%" y="276" width="0.1261%" height="15" fill="rgb(252,64,23)" fg:x="7948" fg:w="13"/><text x="77.3253%" y="286.50"></text></g><g><title>MatVecWrapper_matvec (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (987 samples, 9.57%)</title><rect x="67.6493%" y="244" width="9.5714%" height="15" fill="rgb(232,162,48)" fg:x="6976" fg:w="987"/><text x="67.8993%" y="254.50">MatVecWrapper_..</text></g><g><title>ufunc_generic_fastcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (15 samples, 0.15%)</title><rect x="77.0753%" y="260" width="0.1455%" height="15" fill="rgb(246,160,12)" fg:x="7948" fg:w="15"/><text x="77.3253%" y="270.50"></text></g><g><title>__Pyx_CyFunction_CallAsMethod (_yaml.c:30402) (13 samples, 0.13%)</title><rect x="77.2207%" y="244" width="0.1261%" height="15" fill="rgb(247,166,0)" fg:x="7963" fg:w="13"/><text x="77.4707%" y="254.50"></text></g><g><title>__Pyx_PyVectorcall_FastCallDict (_yaml.c:29715) (13 samples, 0.13%)</title><rect x="77.2207%" y="260" width="0.1261%" height="15" fill="rgb(249,219,21)" fg:x="7963" fg:w="13"/><text x="77.4707%" y="270.50"></text></g><g><title>__Pyx_PyVectorcall_FastCallDict_kw (_yaml.c:29702) (12 samples, 0.12%)</title><rect x="77.2304%" y="276" width="0.1164%" height="15" fill="rgb(205,209,3)" fg:x="7964" fg:w="12"/><text x="77.4804%" y="286.50"></text></g><g><title>qr_insert (scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so) (12 samples, 0.12%)</title><rect x="77.2304%" y="292" width="0.1164%" height="15" fill="rgb(243,44,1)" fg:x="7964" fg:w="12"/><text x="77.4804%" y="302.50"></text></g><g><title>__Pyx_PyObject_to_MemoryviewSlice_ds_double.constprop.0 (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (16 samples, 0.16%)</title><rect x="77.3565%" y="244" width="0.1552%" height="15" fill="rgb(206,159,16)" fg:x="7977" fg:w="16"/><text x="77.6065%" y="254.50"></text></g><g><title>__Pyx_ValidateAndInit_memviewslice.constprop.0 (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (15 samples, 0.15%)</title><rect x="77.3662%" y="260" width="0.1455%" height="15" fill="rgb(244,77,30)" fg:x="7978" fg:w="15"/><text x="77.6162%" y="270.50"></text></g><g><title>__pyx_memoryview_new (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (12 samples, 0.12%)</title><rect x="77.3953%" y="276" width="0.1164%" height="15" fill="rgb(218,69,12)" fg:x="7981" fg:w="12"/><text x="77.6453%" y="286.50"></text></g><g><title>array_subscript (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (13 samples, 0.13%)</title><rect x="77.7929%" y="244" width="0.1261%" height="15" fill="rgb(212,87,7)" fg:x="8022" fg:w="13"/><text x="78.0429%" y="254.50"></text></g><g><title>lgmres_cy_cy_dgelsd (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (16 samples, 0.16%)</title><rect x="78.0062%" y="244" width="0.1552%" height="15" fill="rgb(245,114,25)" fg:x="8044" fg:w="16"/><text x="78.2562%" y="254.50"></text></g><g><title>dgeesx_ (libopenblasp-r0.3.29.so) (15 samples, 0.15%)</title><rect x="78.0159%" y="260" width="0.1455%" height="15" fill="rgb(210,61,42)" fg:x="8045" fg:w="15"/><text x="78.2659%" y="270.50"></text></g><g><title>sneg_tcopy_HASWELL (libopenblasp-r0.3.29.so) (14 samples, 0.14%)</title><rect x="78.2486%" y="244" width="0.1358%" height="15" fill="rgb(211,52,33)" fg:x="8069" fg:w="14"/><text x="78.4986%" y="254.50"></text></g><g><title>sneg_tcopy_HASWELL (libopenblasp-r0.3.29.so) (13 samples, 0.13%)</title><rect x="78.2583%" y="260" width="0.1261%" height="15" fill="rgb(234,58,33)" fg:x="8070" fg:w="13"/><text x="78.5083%" y="270.50"></text></g><g><title>lgmres_cy__fgmres (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (1,142 samples, 11.07%)</title><rect x="67.3584%" y="228" width="11.0745%" height="15" fill="rgb(220,115,36)" fg:x="6946" fg:w="1142"/><text x="67.6084%" y="238.50">lgmres_cy__fgmre..</text></g><g><title>_ipm_local_solver (src/tt_ipm.py:125) (1,187 samples, 11.51%)</title><rect x="66.9802%" y="180" width="11.5109%" height="15" fill="rgb(243,153,54)" fg:x="6907" fg:w="1187"/><text x="67.2302%" y="190.50">_ipm_local_solver..</text></g><g><title>lgmres (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (1,187 samples, 11.51%)</title><rect x="66.9802%" y="196" width="11.5109%" height="15" fill="rgb(251,47,18)" fg:x="6907" fg:w="1187"/><text x="67.2302%" y="206.50">lgmres (cy_src/lg..</text></g><g><title>lgmres_cy_lgmres.constprop.0 (cy_src/lgmres_cy.cpython-310-x86_64-linux-gnu.so) (1,187 samples, 11.51%)</title><rect x="66.9802%" y="212" width="11.5109%" height="15" fill="rgb(242,102,42)" fg:x="6907" fg:w="1187"/><text x="67.2302%" y="222.50">lgmres_cy_lgmres...</text></g><g><title>block_local_product (src/tt_als.py:158) (11 samples, 0.11%)</title><rect x="78.6074%" y="196" width="0.1067%" height="15" fill="rgb(234,31,38)" fg:x="8106" fg:w="11"/><text x="78.8574%" y="206.50"></text></g><g><title>_ipm_local_solver (src/tt_ipm.py:78) (13 samples, 0.13%)</title><rect x="78.6074%" y="180" width="0.1261%" height="15" fill="rgb(221,117,51)" fg:x="8106" fg:w="13"/><text x="78.8574%" y="190.50"></text></g><g><title>forward_backward_sub (src/tt_ipm.py:29) (14 samples, 0.14%)</title><rect x="78.7820%" y="196" width="0.1358%" height="15" fill="rgb(212,20,18)" fg:x="8124" fg:w="14"/><text x="79.0320%" y="206.50"></text></g><g><title>solve_triangular (scipy/linalg/_basic.py:498) (14 samples, 0.14%)</title><rect x="78.7820%" y="212" width="0.1358%" height="15" fill="rgb(245,133,36)" fg:x="8124" fg:w="14"/><text x="79.0320%" y="222.50"></text></g><g><title>_solve_triangular (scipy/linalg/_basic.py:509) (14 samples, 0.14%)</title><rect x="78.7820%" y="228" width="0.1358%" height="15" fill="rgb(212,6,19)" fg:x="8124" fg:w="14"/><text x="79.0320%" y="238.50"></text></g><g><title>f2py_rout__flapack_dtrtrs (scipy/linalg/_flapack.cpython-310-x86_64-linux-gnu.so) (13 samples, 0.13%)</title><rect x="78.7917%" y="244" width="0.1261%" height="15" fill="rgb(218,1,36)" fg:x="8125" fg:w="13"/><text x="79.0417%" y="254.50"></text></g><g><title>dgemmtr_ (libopenblasp-r0.3.29.so) (13 samples, 0.13%)</title><rect x="78.7917%" y="260" width="0.1261%" height="15" fill="rgb(246,84,54)" fg:x="8125" fg:w="13"/><text x="79.0417%" y="270.50"></text></g><g><title>ctrtri_UU_parallel.localalias (libopenblasp-r0.3.29.so) (13 samples, 0.13%)</title><rect x="78.7917%" y="276" width="0.1261%" height="15" fill="rgb(242,110,6)" fg:x="8125" fg:w="13"/><text x="79.0417%" y="286.50"></text></g><g><title>gemm_driver (libopenblasp-r0.3.29.so) (13 samples, 0.13%)</title><rect x="78.7917%" y="292" width="0.1261%" height="15" fill="rgb(214,47,5)" fg:x="8125" fg:w="13"/><text x="79.0417%" y="302.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (13 samples, 0.13%)</title><rect x="78.7917%" y="308" width="0.1261%" height="15" fill="rgb(218,159,25)" fg:x="8125" fg:w="13"/><text x="79.0417%" y="318.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (13 samples, 0.13%)</title><rect x="78.7917%" y="324" width="0.1261%" height="15" fill="rgb(215,211,28)" fg:x="8125" fg:w="13"/><text x="79.0417%" y="334.50"></text></g><g><title>forward_backward_sub (src/tt_ipm.py:30) (19 samples, 0.18%)</title><rect x="78.9178%" y="196" width="0.1843%" height="15" fill="rgb(238,59,32)" fg:x="8138" fg:w="19"/><text x="79.1678%" y="206.50"></text></g><g><title>solve_triangular (scipy/linalg/_basic.py:498) (19 samples, 0.18%)</title><rect x="78.9178%" y="212" width="0.1843%" height="15" fill="rgb(226,82,3)" fg:x="8138" fg:w="19"/><text x="79.1678%" y="222.50"></text></g><g><title>_solve_triangular (scipy/linalg/_basic.py:513) (19 samples, 0.18%)</title><rect x="78.9178%" y="228" width="0.1843%" height="15" fill="rgb(240,164,32)" fg:x="8138" fg:w="19"/><text x="79.1678%" y="238.50"></text></g><g><title>f2py_rout__flapack_dtrtrs (scipy/linalg/_flapack.cpython-310-x86_64-linux-gnu.so) (19 samples, 0.18%)</title><rect x="78.9178%" y="244" width="0.1843%" height="15" fill="rgb(232,46,7)" fg:x="8138" fg:w="19"/><text x="79.1678%" y="254.50"></text></g><g><title>dgemmtr_ (libopenblasp-r0.3.29.so) (19 samples, 0.18%)</title><rect x="78.9178%" y="260" width="0.1843%" height="15" fill="rgb(229,129,53)" fg:x="8138" fg:w="19"/><text x="79.1678%" y="270.50"></text></g><g><title>ctrtri_UU_parallel.localalias (libopenblasp-r0.3.29.so) (19 samples, 0.18%)</title><rect x="78.9178%" y="276" width="0.1843%" height="15" fill="rgb(234,188,29)" fg:x="8138" fg:w="19"/><text x="79.1678%" y="286.50"></text></g><g><title>gemm_driver (libopenblasp-r0.3.29.so) (19 samples, 0.18%)</title><rect x="78.9178%" y="292" width="0.1843%" height="15" fill="rgb(246,141,4)" fg:x="8138" fg:w="19"/><text x="79.1678%" y="302.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (19 samples, 0.18%)</title><rect x="78.9178%" y="308" width="0.1843%" height="15" fill="rgb(229,23,39)" fg:x="8138" fg:w="19"/><text x="79.1678%" y="318.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (19 samples, 0.18%)</title><rect x="78.9178%" y="324" width="0.1843%" height="15" fill="rgb(206,12,3)" fg:x="8138" fg:w="19"/><text x="79.1678%" y="334.50"></text></g><g><title>_ipm_local_solver (src/tt_ipm.py:97) (44 samples, 0.43%)</title><rect x="78.7820%" y="180" width="0.4267%" height="15" fill="rgb(252,226,20)" fg:x="8124" fg:w="44"/><text x="79.0320%" y="190.50"></text></g><g><title>ufunc_generic_fastcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (11 samples, 0.11%)</title><rect x="79.1020%" y="196" width="0.1067%" height="15" fill="rgb(216,123,35)" fg:x="8157" fg:w="11"/><text x="79.3520%" y="206.50"></text></g><g><title>_fwd_sweep (src/tt_als.py:296) (1,383 samples, 13.41%)</title><rect x="65.8747%" y="164" width="13.4116%" height="15" fill="rgb(212,68,40)" fg:x="6793" fg:w="1383"/><text x="66.1247%" y="174.50">_fwd_sweep (src/tt_a..</text></g><g><title>_fwd_sweep (src/tt_als.py:346) (15 samples, 0.15%)</title><rect x="79.5093%" y="164" width="0.1455%" height="15" fill="rgb(254,125,32)" fg:x="8199" fg:w="15"/><text x="79.7593%" y="174.50"></text></g><g><title>&lt;dictcomp&gt; (src/tt_als.py:346) (15 samples, 0.15%)</title><rect x="79.5093%" y="180" width="0.1455%" height="15" fill="rgb(253,97,22)" fg:x="8199" fg:w="15"/><text x="79.7593%" y="190.50"></text></g><g><title>compute_phi_fwd_A (src/tt_als.py:184) (15 samples, 0.15%)</title><rect x="79.5093%" y="196" width="0.1455%" height="15" fill="rgb(241,101,14)" fg:x="8199" fg:w="15"/><text x="79.7593%" y="206.50"></text></g><g><title>cached_einsum (src/tt_ops.py:23) (14 samples, 0.14%)</title><rect x="79.5190%" y="212" width="0.1358%" height="15" fill="rgb(238,103,29)" fg:x="8200" fg:w="14"/><text x="79.7690%" y="222.50"></text></g><g><title>__call__ (opt_einsum/contract.py:895) (14 samples, 0.14%)</title><rect x="79.5190%" y="228" width="0.1358%" height="15" fill="rgb(233,195,47)" fg:x="8200" fg:w="14"/><text x="79.7690%" y="238.50"></text></g><g><title>_contract (opt_einsum/contract.py:816) (14 samples, 0.14%)</title><rect x="79.5190%" y="244" width="0.1358%" height="15" fill="rgb(246,218,30)" fg:x="8200" fg:w="14"/><text x="79.7690%" y="254.50"></text></g><g><title>_core_contract (opt_einsum/contract.py:687) (12 samples, 0.12%)</title><rect x="79.5384%" y="260" width="0.1164%" height="15" fill="rgb(219,145,47)" fg:x="8202" fg:w="12"/><text x="79.7884%" y="270.50"></text></g><g><title>cached_tensordot (opt_einsum/sharing.py:140) (12 samples, 0.12%)</title><rect x="79.5384%" y="276" width="0.1164%" height="15" fill="rgb(243,12,26)" fg:x="8202" fg:w="12"/><text x="79.7884%" y="286.50"></text></g><g><title>_tensordot (opt_einsum/contract.py:470) (11 samples, 0.11%)</title><rect x="79.5481%" y="292" width="0.1067%" height="15" fill="rgb(214,87,16)" fg:x="8203" fg:w="11"/><text x="79.7981%" y="302.50"></text></g><g><title>dispatcher_vectorcall (numpy/_core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (11 samples, 0.11%)</title><rect x="79.5481%" y="308" width="0.1067%" height="15" fill="rgb(208,99,42)" fg:x="8203" fg:w="11"/><text x="79.7981%" y="318.50"></text></g><g><title>_tt_ipm_newton_step (src/tt_ipm.py:508) (3,145 samples, 30.50%)</title><rect x="49.1951%" y="116" width="30.4984%" height="15" fill="rgb(253,99,2)" fg:x="5073" fg:w="3145"/><text x="49.4451%" y="126.50">_tt_ipm_newton_step (src/tt_ipm.py:508)</text></g><g><title>&lt;lambda&gt; (src/tt_ipm.py:759) (3,086 samples, 29.93%)</title><rect x="49.7673%" y="132" width="29.9263%" height="15" fill="rgb(220,168,23)" fg:x="5132" fg:w="3086"/><text x="50.0173%" y="142.50">&lt;lambda&gt; (src/tt_ipm.py:759)</text></g><g><title>tt_block_als (src/tt_als.py:421) (1,425 samples, 13.82%)</title><rect x="65.8747%" y="148" width="13.8189%" height="15" fill="rgb(242,38,24)" fg:x="6793" fg:w="1425"/><text x="66.1247%" y="158.50">tt_block_als (src/tt_..</text></g><g><title>dlatps_ (libopenblasp-r0.3.29.so) (12 samples, 0.12%)</title><rect x="79.9748%" y="244" width="0.1164%" height="15" fill="rgb(225,182,9)" fg:x="8247" fg:w="12"/><text x="80.2248%" y="254.50"></text></g><g><title>dlatps_ (libopenblasp-r0.3.29.so) (12 samples, 0.12%)</title><rect x="79.9748%" y="260" width="0.1164%" height="15" fill="rgb(243,178,37)" fg:x="8247" fg:w="12"/><text x="80.2248%" y="270.50"></text></g><g><title>dlaqr4_ (libopenblasp-r0.3.29.so) (12 samples, 0.12%)</title><rect x="79.9748%" y="276" width="0.1164%" height="15" fill="rgb(232,139,19)" fg:x="8247" fg:w="12"/><text x="80.2248%" y="286.50"></text></g><g><title>cblas_sgemmt (libopenblasp-r0.3.29.so) (12 samples, 0.12%)</title><rect x="79.9748%" y="292" width="0.1164%" height="15" fill="rgb(225,201,24)" fg:x="8247" fg:w="12"/><text x="80.2248%" y="302.50"></text></g><g><title>dspmv_L (libopenblasp-r0.3.29.so) (12 samples, 0.12%)</title><rect x="79.9748%" y="308" width="0.1164%" height="15" fill="rgb(221,47,46)" fg:x="8247" fg:w="12"/><text x="80.2248%" y="318.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (12 samples, 0.12%)</title><rect x="79.9748%" y="324" width="0.1164%" height="15" fill="rgb(249,23,13)" fg:x="8247" fg:w="12"/><text x="80.2248%" y="334.50"></text></g><g><title>inner_thread (libopenblasp-r0.3.29.so) (12 samples, 0.12%)</title><rect x="79.9748%" y="340" width="0.1164%" height="15" fill="rgb(219,9,5)" fg:x="8247" fg:w="12"/><text x="80.2248%" y="350.50"></text></g><g><title>dgesdd_ (libopenblasp-r0.3.29.so) (21 samples, 0.20%)</title><rect x="79.9069%" y="228" width="0.2036%" height="15" fill="rgb(254,171,16)" fg:x="8240" fg:w="21"/><text x="80.1569%" y="238.50"></text></g><g><title>tt_compute_dual_feasibility (src/tt_ipm.py:268) (24 samples, 0.23%)</title><rect x="79.9069%" y="148" width="0.2327%" height="15" fill="rgb(230,171,20)" fg:x="8240" fg:w="24"/><text x="80.1569%" y="158.50"></text></g><g><title>tt_fast_matrix_vec_mul (src/tt_ops.py:258) (24 samples, 0.23%)</title><rect x="79.9069%" y="164" width="0.2327%" height="15" fill="rgb(210,71,41)" fg:x="8240" fg:w="24"/><text x="80.1569%" y="174.50"></text></g><g><title>swap_cores (src/tt_ops.py:235) (24 samples, 0.23%)</title><rect x="79.9069%" y="180" width="0.2327%" height="15" fill="rgb(206,173,20)" fg:x="8240" fg:w="24"/><text x="80.1569%" y="190.50"></text></g><g><title>svd (scipy/linalg/_decomp_svd.py:162) (24 samples, 0.23%)</title><rect x="79.9069%" y="196" width="0.2327%" height="15" fill="rgb(233,88,34)" fg:x="8240" fg:w="24"/><text x="80.1569%" y="206.50"></text></g><g><title>f2py_rout__flapack_dgesvd (scipy/linalg/_flapack.cpython-310-x86_64-linux-gnu.so) (24 samples, 0.23%)</title><rect x="79.9069%" y="212" width="0.2327%" height="15" fill="rgb(223,209,46)" fg:x="8240" fg:w="24"/><text x="80.1569%" y="222.50"></text></g><g><title>tt_assess_solution_quality (src/tt_ipm.py:305) (30 samples, 0.29%)</title><rect x="79.9069%" y="132" width="0.2909%" height="15" fill="rgb(250,43,18)" fg:x="8240" fg:w="30"/><text x="80.1569%" y="142.50"></text></g><g><title>_tt_ipm_newton_step (src/tt_ipm.py:522) (41 samples, 0.40%)</title><rect x="79.8390%" y="116" width="0.3976%" height="15" fill="rgb(208,13,10)" fg:x="8233" fg:w="41"/><text x="80.0890%" y="126.50"></text></g><g><title>_tt_line_search (src/tt_ipm.py:568) (20 samples, 0.19%)</title><rect x="80.2366%" y="132" width="0.1939%" height="15" fill="rgb(212,200,36)" fg:x="8274" fg:w="20"/><text x="80.4866%" y="142.50"></text></g><g><title>_tt_line_search (src/tt_ipm.py:570) (19 samples, 0.18%)</title><rect x="80.4306%" y="132" width="0.1843%" height="15" fill="rgb(225,90,30)" fg:x="8294" fg:w="19"/><text x="80.6806%" y="142.50"></text></g><g><title>_ineq_step_size (src/tt_ipm.py:586) (11 samples, 0.11%)</title><rect x="80.7215%" y="164" width="0.1067%" height="15" fill="rgb(236,182,39)" fg:x="8324" fg:w="11"/><text x="80.9715%" y="174.50"></text></g><g><title>&lt;module&gt; (graphm.py:289) (8,335 samples, 80.83%)</title><rect x="0.0291%" y="84" width="80.8282%" height="15" fill="rgb(212,144,35)" fg:x="3" fg:w="8335"/><text x="0.2791%" y="94.50">&lt;module&gt; (graphm.py:289)</text></g><g><title>tt_ipm (src/tt_ipm.py:841) (8,256 samples, 80.06%)</title><rect x="0.7952%" y="100" width="80.0621%" height="15" fill="rgb(228,63,44)" fg:x="82" fg:w="8256"/><text x="1.0452%" y="110.50">tt_ipm (src/tt_ipm.py:841)</text></g><g><title>_tt_ipm_newton_step (src/tt_ipm.py:524) (64 samples, 0.62%)</title><rect x="80.2366%" y="116" width="0.6206%" height="15" fill="rgb(228,109,6)" fg:x="8274" fg:w="64"/><text x="80.4866%" y="126.50"></text></g><g><title>_tt_line_search (src/tt_ipm.py:575) (25 samples, 0.24%)</title><rect x="80.6148%" y="132" width="0.2424%" height="15" fill="rgb(238,117,24)" fg:x="8313" fg:w="25"/><text x="80.8648%" y="142.50"></text></g><g><title>_tt_line_search_ineq (src/tt_ipm.py:602) (16 samples, 0.16%)</title><rect x="80.7021%" y="148" width="0.1552%" height="15" fill="rgb(242,26,26)" fg:x="8322" fg:w="16"/><text x="80.9521%" y="158.50"></text></g><g><title>0x7245ae22a1ca (libc.so.6) (8,360 samples, 81.07%)</title><rect x="0.0000%" y="68" width="81.0706%" height="15" fill="rgb(221,92,48)" fg:x="0" fg:w="8360"/><text x="0.2500%" y="78.50">0x7245ae22a1ca (libc.so.6)</text></g><g><title>dgemm_beta_HASWELL (libopenblasp-r0.3.29.so) (11 samples, 0.11%)</title><rect x="81.1967%" y="276" width="0.1067%" height="15" fill="rgb(209,209,32)" fg:x="8373" fg:w="11"/><text x="81.4467%" y="286.50"></text></g><g><title>dgemm_kernel_HASWELL (libopenblasp-r0.3.29.so) (21 samples, 0.20%)</title><rect x="81.3033%" y="276" width="0.2036%" height="15" fill="rgb(221,70,22)" fg:x="8384" fg:w="21"/><text x="81.5533%" y="286.50"></text></g><g><title>dgemv_kernel_4x4 (libopenblasp-r0.3.29.so) (15 samples, 0.15%)</title><rect x="81.5555%" y="276" width="0.1455%" height="15" fill="rgb(248,145,5)" fg:x="8410" fg:w="15"/><text x="81.8055%" y="286.50"></text></g><g><title>dgemv_n_HASWELL (libopenblasp-r0.3.29.so) (88 samples, 0.85%)</title><rect x="81.7009%" y="276" width="0.8534%" height="15" fill="rgb(226,116,26)" fg:x="8425" fg:w="88"/><text x="81.9509%" y="286.50"></text></g><g><title>dgemv_t_HASWELL (libopenblasp-r0.3.29.so) (166 samples, 1.61%)</title><rect x="82.5543%" y="276" width="1.6098%" height="15" fill="rgb(244,5,17)" fg:x="8513" fg:w="166"/><text x="82.8043%" y="286.50"></text></g><g><title>dsymv_L_HASWELL (libopenblasp-r0.3.29.so) (232 samples, 2.25%)</title><rect x="84.1641%" y="276" width="2.2498%" height="15" fill="rgb(252,159,33)" fg:x="8679" fg:w="232"/><text x="84.4141%" y="286.50">d..</text></g><g><title>dsymv_U_HASWELL (libopenblasp-r0.3.29.so) (41 samples, 0.40%)</title><rect x="86.4139%" y="276" width="0.3976%" height="15" fill="rgb(206,71,0)" fg:x="8911" fg:w="41"/><text x="86.6639%" y="286.50"></text></g><g><title>__call__ (opt_einsum/contract.py:895) (587 samples, 5.69%)</title><rect x="81.1288%" y="180" width="5.6924%" height="15" fill="rgb(233,118,54)" fg:x="8366" fg:w="587"/><text x="81.3788%" y="190.50">__call_..</text></g><g><title>_contract (opt_einsum/contract.py:816) (587 samples, 5.69%)</title><rect x="81.1288%" y="196" width="5.6924%" height="15" fill="rgb(234,83,48)" fg:x="8366" fg:w="587"/><text x="81.3788%" y="206.50">_contra..</text></g><g><title>_core_contract (opt_einsum/contract.py:687) (587 samples, 5.69%)</title><rect x="81.1288%" y="212" width="5.6924%" height="15" fill="rgb(228,3,54)" fg:x="8366" fg:w="587"/><text x="81.3788%" y="222.50">_core_c..</text></g><g><title>cached_tensordot (opt_einsum/sharing.py:140) (587 samples, 5.69%)</title><rect x="81.1288%" y="228" width="5.6924%" height="15" fill="rgb(226,155,13)" fg:x="8366" fg:w="587"/><text x="81.3788%" y="238.50">cached_..</text></g><g><title>_tensordot (opt_einsum/contract.py:470) (587 samples, 5.69%)</title><rect x="81.1288%" y="244" width="5.6924%" height="15" fill="rgb(241,28,37)" fg:x="8366" fg:w="587"/><text x="81.3788%" y="254.50">_tensor..</text></g><g><title>tensordot (numpy/_core/numeric.py:1177) (587 samples, 5.69%)</title><rect x="81.1288%" y="260" width="5.6924%" height="15" fill="rgb(233,93,10)" fg:x="8366" fg:w="587"/><text x="81.3788%" y="270.50">tensord..</text></g><g><title>_ipm_local_solver (src/tt_ipm.py:125) (588 samples, 5.70%)</title><rect x="81.1288%" y="164" width="5.7021%" height="15" fill="rgb(225,113,19)" fg:x="8366" fg:w="588"/><text x="81.3788%" y="174.50">_ipm_lo..</text></g><g><title>_bck_sweep (src/tt_als.py:217) (591 samples, 5.73%)</title><rect x="81.1191%" y="148" width="5.7312%" height="15" fill="rgb(241,2,18)" fg:x="8365" fg:w="591"/><text x="81.3691%" y="158.50">_bck_sw..</text></g><g><title>tt_block_als (src/tt_als.py:403) (594 samples, 5.76%)</title><rect x="81.1191%" y="132" width="5.7603%" height="15" fill="rgb(228,207,21)" fg:x="8365" fg:w="594"/><text x="81.3691%" y="142.50">tt_bloc..</text></g><g><title>dgemv_n_HASWELL (libopenblasp-r0.3.29.so) (61 samples, 0.59%)</title><rect x="87.1315%" y="276" width="0.5915%" height="15" fill="rgb(213,211,35)" fg:x="8985" fg:w="61"/><text x="87.3815%" y="286.50"></text></g><g><title>dgemv_t_HASWELL (libopenblasp-r0.3.29.so) (130 samples, 1.26%)</title><rect x="87.7230%" y="276" width="1.2607%" height="15" fill="rgb(209,83,10)" fg:x="9046" fg:w="130"/><text x="87.9730%" y="286.50"></text></g><g><title>dsymv_L_HASWELL (libopenblasp-r0.3.29.so) (226 samples, 2.19%)</title><rect x="88.9934%" y="276" width="2.1916%" height="15" fill="rgb(209,164,1)" fg:x="9177" fg:w="226"/><text x="89.2434%" y="286.50">d..</text></g><g><title>_ipm_local_solver (src/tt_ipm.py:125) (472 samples, 4.58%)</title><rect x="86.8988%" y="164" width="4.5772%" height="15" fill="rgb(213,184,43)" fg:x="8961" fg:w="472"/><text x="87.1488%" y="174.50">_ipm_..</text></g><g><title>__call__ (opt_einsum/contract.py:895) (472 samples, 4.58%)</title><rect x="86.8988%" y="180" width="4.5772%" height="15" fill="rgb(231,61,34)" fg:x="8961" fg:w="472"/><text x="87.1488%" y="190.50">__cal..</text></g><g><title>_contract (opt_einsum/contract.py:816) (472 samples, 4.58%)</title><rect x="86.8988%" y="196" width="4.5772%" height="15" fill="rgb(235,75,3)" fg:x="8961" fg:w="472"/><text x="87.1488%" y="206.50">_cont..</text></g><g><title>_core_contract (opt_einsum/contract.py:687) (472 samples, 4.58%)</title><rect x="86.8988%" y="212" width="4.5772%" height="15" fill="rgb(220,106,47)" fg:x="8961" fg:w="472"/><text x="87.1488%" y="222.50">_core..</text></g><g><title>cached_tensordot (opt_einsum/sharing.py:140) (472 samples, 4.58%)</title><rect x="86.8988%" y="228" width="4.5772%" height="15" fill="rgb(210,196,33)" fg:x="8961" fg:w="472"/><text x="87.1488%" y="238.50">cache..</text></g><g><title>_tensordot (opt_einsum/contract.py:470) (472 samples, 4.58%)</title><rect x="86.8988%" y="244" width="4.5772%" height="15" fill="rgb(229,154,42)" fg:x="8961" fg:w="472"/><text x="87.1488%" y="254.50">_tens..</text></g><g><title>tensordot (numpy/_core/numeric.py:1177) (472 samples, 4.58%)</title><rect x="86.8988%" y="260" width="4.5772%" height="15" fill="rgb(228,114,26)" fg:x="8961" fg:w="472"/><text x="87.1488%" y="270.50">tenso..</text></g><g><title>dsymv_U_HASWELL (libopenblasp-r0.3.29.so) (30 samples, 0.29%)</title><rect x="91.1850%" y="276" width="0.2909%" height="15" fill="rgb(208,144,1)" fg:x="9403" fg:w="30"/><text x="91.4350%" y="286.50"></text></g><g><title>_fwd_sweep (src/tt_als.py:296) (482 samples, 4.67%)</title><rect x="86.8794%" y="148" width="4.6742%" height="15" fill="rgb(239,112,37)" fg:x="8959" fg:w="482"/><text x="87.1294%" y="158.50">_fwd_..</text></g><g><title>_tt_ipm_newton_step (src/tt_ipm.py:412) (1,084 samples, 10.51%)</title><rect x="81.0803%" y="100" width="10.5120%" height="15" fill="rgb(210,96,50)" fg:x="8361" fg:w="1084"/><text x="81.3303%" y="110.50">_tt_ipm_newton_..</text></g><g><title>&lt;lambda&gt; (src/tt_ipm.py:759) (1,080 samples, 10.47%)</title><rect x="81.1191%" y="116" width="10.4732%" height="15" fill="rgb(222,178,2)" fg:x="8365" fg:w="1080"/><text x="81.3691%" y="126.50">&lt;lambda&gt; (src/t..</text></g><g><title>tt_block_als (src/tt_als.py:421) (486 samples, 4.71%)</title><rect x="86.8794%" y="132" width="4.7130%" height="15" fill="rgb(226,74,18)" fg:x="8959" fg:w="486"/><text x="87.1294%" y="142.50">tt_bl..</text></g><g><title>dgemv_n_HASWELL (libopenblasp-r0.3.29.so) (61 samples, 0.59%)</title><rect x="92.0481%" y="276" width="0.5915%" height="15" fill="rgb(225,67,54)" fg:x="9492" fg:w="61"/><text x="92.2981%" y="286.50"></text></g><g><title>dgemv_t_HASWELL (libopenblasp-r0.3.29.so) (144 samples, 1.40%)</title><rect x="92.6396%" y="276" width="1.3964%" height="15" fill="rgb(251,92,32)" fg:x="9553" fg:w="144"/><text x="92.8896%" y="286.50"></text></g><g><title>dsymv_L_HASWELL (libopenblasp-r0.3.29.so) (200 samples, 1.94%)</title><rect x="94.0361%" y="276" width="1.9395%" height="15" fill="rgb(228,149,22)" fg:x="9697" fg:w="200"/><text x="94.2861%" y="286.50">d..</text></g><g><title>__call__ (opt_einsum/contract.py:895) (466 samples, 4.52%)</title><rect x="91.6990%" y="180" width="4.5190%" height="15" fill="rgb(243,54,13)" fg:x="9456" fg:w="466"/><text x="91.9490%" y="190.50">__cal..</text></g><g><title>_contract (opt_einsum/contract.py:816) (466 samples, 4.52%)</title><rect x="91.6990%" y="196" width="4.5190%" height="15" fill="rgb(243,180,28)" fg:x="9456" fg:w="466"/><text x="91.9490%" y="206.50">_cont..</text></g><g><title>_core_contract (opt_einsum/contract.py:687) (466 samples, 4.52%)</title><rect x="91.6990%" y="212" width="4.5190%" height="15" fill="rgb(208,167,24)" fg:x="9456" fg:w="466"/><text x="91.9490%" y="222.50">_core..</text></g><g><title>cached_tensordot (opt_einsum/sharing.py:140) (466 samples, 4.52%)</title><rect x="91.6990%" y="228" width="4.5190%" height="15" fill="rgb(245,73,45)" fg:x="9456" fg:w="466"/><text x="91.9490%" y="238.50">cache..</text></g><g><title>_tensordot (opt_einsum/contract.py:470) (466 samples, 4.52%)</title><rect x="91.6990%" y="244" width="4.5190%" height="15" fill="rgb(237,203,48)" fg:x="9456" fg:w="466"/><text x="91.9490%" y="254.50">_tens..</text></g><g><title>tensordot (numpy/_core/numeric.py:1177) (466 samples, 4.52%)</title><rect x="91.6990%" y="260" width="4.5190%" height="15" fill="rgb(211,197,16)" fg:x="9456" fg:w="466"/><text x="91.9490%" y="270.50">tenso..</text></g><g><title>dsymv_U_HASWELL (libopenblasp-r0.3.29.so) (25 samples, 0.24%)</title><rect x="95.9756%" y="276" width="0.2424%" height="15" fill="rgb(243,99,51)" fg:x="9897" fg:w="25"/><text x="96.2256%" y="286.50"></text></g><g><title>_bck_sweep (src/tt_als.py:217) (470 samples, 4.56%)</title><rect x="91.6699%" y="148" width="4.5578%" height="15" fill="rgb(215,123,29)" fg:x="9453" fg:w="470"/><text x="91.9199%" y="158.50">_bck_..</text></g><g><title>_ipm_local_solver (src/tt_ipm.py:125) (467 samples, 4.53%)</title><rect x="91.6990%" y="164" width="4.5287%" height="15" fill="rgb(239,186,37)" fg:x="9456" fg:w="467"/><text x="91.9490%" y="174.50">_ipm_..</text></g><g><title>tt_block_als (src/tt_als.py:403) (478 samples, 4.64%)</title><rect x="91.6699%" y="132" width="4.6354%" height="15" fill="rgb(252,136,39)" fg:x="9453" fg:w="478"/><text x="91.9199%" y="142.50">tt_bl..</text></g><g><title>dgemv_kernel_4x4 (libopenblasp-r0.3.29.so) (14 samples, 0.14%)</title><rect x="96.5186%" y="276" width="0.1358%" height="15" fill="rgb(223,213,32)" fg:x="9953" fg:w="14"/><text x="96.7686%" y="286.50"></text></g><g><title>dgemv_n_HASWELL (libopenblasp-r0.3.29.so) (37 samples, 0.36%)</title><rect x="96.6544%" y="276" width="0.3588%" height="15" fill="rgb(233,115,5)" fg:x="9967" fg:w="37"/><text x="96.9044%" y="286.50"></text></g><g><title>dgemv_t_HASWELL (libopenblasp-r0.3.29.so) (103 samples, 1.00%)</title><rect x="97.0132%" y="276" width="0.9988%" height="15" fill="rgb(207,226,44)" fg:x="10004" fg:w="103"/><text x="97.2632%" y="286.50"></text></g><g><title>dsymv_L_HASWELL (libopenblasp-r0.3.29.so) (164 samples, 1.59%)</title><rect x="98.0120%" y="276" width="1.5904%" height="15" fill="rgb(208,126,0)" fg:x="10107" fg:w="164"/><text x="98.2620%" y="286.50"></text></g><g><title>__call__ (opt_einsum/contract.py:895) (361 samples, 3.50%)</title><rect x="96.3247%" y="180" width="3.5008%" height="15" fill="rgb(244,66,21)" fg:x="9933" fg:w="361"/><text x="96.5747%" y="190.50">__c..</text></g><g><title>_contract (opt_einsum/contract.py:816) (361 samples, 3.50%)</title><rect x="96.3247%" y="196" width="3.5008%" height="15" fill="rgb(222,97,12)" fg:x="9933" fg:w="361"/><text x="96.5747%" y="206.50">_co..</text></g><g><title>_core_contract (opt_einsum/contract.py:687) (361 samples, 3.50%)</title><rect x="96.3247%" y="212" width="3.5008%" height="15" fill="rgb(219,213,19)" fg:x="9933" fg:w="361"/><text x="96.5747%" y="222.50">_co..</text></g><g><title>cached_tensordot (opt_einsum/sharing.py:140) (361 samples, 3.50%)</title><rect x="96.3247%" y="228" width="3.5008%" height="15" fill="rgb(252,169,30)" fg:x="9933" fg:w="361"/><text x="96.5747%" y="238.50">cac..</text></g><g><title>_tensordot (opt_einsum/contract.py:470) (361 samples, 3.50%)</title><rect x="96.3247%" y="244" width="3.5008%" height="15" fill="rgb(206,32,51)" fg:x="9933" fg:w="361"/><text x="96.5747%" y="254.50">_te..</text></g><g><title>tensordot (numpy/_core/numeric.py:1177) (361 samples, 3.50%)</title><rect x="96.3247%" y="260" width="3.5008%" height="15" fill="rgb(250,172,42)" fg:x="9933" fg:w="361"/><text x="96.5747%" y="270.50">ten..</text></g><g><title>dsymv_U_HASWELL (libopenblasp-r0.3.29.so) (23 samples, 0.22%)</title><rect x="99.6024%" y="276" width="0.2230%" height="15" fill="rgb(209,34,43)" fg:x="10271" fg:w="23"/><text x="99.8524%" y="286.50"></text></g><g><title>_ipm_local_solver (src/tt_ipm.py:125) (364 samples, 3.53%)</title><rect x="96.3247%" y="164" width="3.5299%" height="15" fill="rgb(223,11,35)" fg:x="9933" fg:w="364"/><text x="96.5747%" y="174.50">_ip..</text></g><g><title>_fwd_sweep (src/tt_als.py:296) (376 samples, 3.65%)</title><rect x="96.3053%" y="148" width="3.6462%" height="15" fill="rgb(251,219,26)" fg:x="9931" fg:w="376"/><text x="96.5553%" y="158.50">_fwd..</text></g><g><title>_tt_ipm_newton_step (src/tt_ipm.py:508) (860 samples, 8.34%)</title><rect x="91.6408%" y="100" width="8.3398%" height="15" fill="rgb(231,119,3)" fg:x="9450" fg:w="860"/><text x="91.8908%" y="110.50">_tt_ipm_newt..</text></g><g><title>&lt;lambda&gt; (src/tt_ipm.py:759) (857 samples, 8.31%)</title><rect x="91.6699%" y="116" width="8.3107%" height="15" fill="rgb(216,97,11)" fg:x="9453" fg:w="857"/><text x="91.9199%" y="126.50">&lt;lambda&gt; (sr..</text></g><g><title>tt_block_als (src/tt_als.py:421) (379 samples, 3.68%)</title><rect x="96.3053%" y="132" width="3.6753%" height="15" fill="rgb(223,59,9)" fg:x="9931" fg:w="379"/><text x="96.5553%" y="142.50">tt_b..</text></g><g><title>all (10,312 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(233,93,31)" fg:x="0" fg:w="10312"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (graphm.py:289) (1,952 samples, 18.93%)</title><rect x="81.0706%" y="68" width="18.9294%" height="15" fill="rgb(239,81,33)" fg:x="8360" fg:w="1952"/><text x="81.3206%" y="78.50">&lt;module&gt; (graphm.py:289)</text></g><g><title>tt_ipm (src/tt_ipm.py:841) (1,951 samples, 18.92%)</title><rect x="81.0803%" y="84" width="18.9197%" height="15" fill="rgb(213,120,34)" fg:x="8361" fg:w="1951"/><text x="81.3303%" y="94.50">tt_ipm (src/tt_ipm.py:841)</text></g></svg></svg>