from time import time
from utils import *
from optimiser import ILPSolver, AnswerSetSolver

const_space = ConstraintSpace()
x = const_space.Atom("x")
y = const_space.Atom("y")
z = const_space.Atom("z")
w = const_space.Atom("w")
u = const_space.Atom("u")
h = const_space.Hypothesis("h_0")
const_space.exists_S(h << (x & w))
const_space.forall_S(h << (x & y & z))
const_space.exists_S(h << (x << (y & z)))
const_space.forall_S(h >> x)
const_space.exists_S(h << (x & ~z & ~y))
const_space.exists_S(h | ~(u & w))
opt = ILPSolver(const_space, objective=tt_nuc_schatten_norm, noise=0)
t_1 = time()
hypothesis = opt.find_hypothesis()
t_2 = time()
print("Shapes: ", [t.shape for t in hypothesis])
print(h.to_CNF([x, y, z, w, u]), flush=True)
print("Equality constraint Score: ", [jnp.sum(jnp.abs(c(hypothesis))) for c in const_space.eq_constraints])
print("Inequality constraint Score: ", [jnp.sum(c(hypothesis)) for c in const_space.iq_constraints])
print("Score:", tt_boolean_criterion(len(hypothesis))(hypothesis), tt_inner_prod(hypothesis, hypothesis))
print(f"Total time taken: {t_2-t_1}s.")
asp_solver = AnswerSetSolver([x, y, z, w, u])
X = asp_solver.get_minimal_answer_set(hypothesis)
print(X)
print(tt_inner_prod(hypothesis, [np.array([1, 1]).reshape(1, 2, 1), np.array([1, 1]).reshape(1, 2, 1), np.array([1, 1]).reshape(1, 2, 1), np.array([1, -1]).reshape(1, 2, 1), np.array([1, -1]).reshape(1, 2, 1)]))
h = x.to_tt_train()
print("Equality constraint Score: ", [jnp.sum(jnp.abs(c(h))) for c in const_space.eq_constraints])
print("Inequality constraint Score: ", [jnp.sum(c(h)) for c in const_space.iq_constraints])